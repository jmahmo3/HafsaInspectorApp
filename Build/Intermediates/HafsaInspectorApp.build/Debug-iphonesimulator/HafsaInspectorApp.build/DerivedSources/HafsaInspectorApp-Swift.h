// Generated by Apple Swift version 3.0 (swiftlang-800.0.46.2 clang-800.0.38)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import ObjectiveC;
@import Foundation;
@import QuartzCore;
@import AVFoundation;
@import CoreMedia;
@import Photos;
#endif

#import "/Users/sameersiddiqui/Projects/HafsaInspectorApp/HafsaInspectorApp/Utilities/CustomControls/HafsaInspectorApp-Bridging-Header.h"

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIImageView;
@class NSCoder;

SWIFT_CLASS("_TtC17HafsaInspectorApp26AddImageCollectionViewCell")
@interface AddImageCollectionViewCell : UICollectionViewCell
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified takenImage;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, AnimationFillMode, "AnimationFillMode") {
  AnimationFillModeForwards = 0,
  AnimationFillModeBackwards = 1,
  AnimationFillModeBoth = 2,
  AnimationFillModeRemoved = 3,
};

typedef SWIFT_ENUM_NAMED(NSInteger, AnimationRotationMode, "AnimationRotationMode") {
  AnimationRotationModeNone = 0,
  AnimationRotationModeAuto = 1,
  AnimationRotationModeAutoReverse = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, AnimationTransition, "AnimationTransition") {
  AnimationTransitionFade = 0,
  AnimationTransitionMoveIn = 1,
  AnimationTransitionPush = 2,
  AnimationTransitionReveal = 3,
};

typedef SWIFT_ENUM_NAMED(NSInteger, AnimationTransitionSubType, "AnimationTransitionSubType") {
  AnimationTransitionSubTypeRight = 0,
  AnimationTransitionSubTypeLeft = 1,
  AnimationTransitionSubTypeTop = 2,
  AnimationTransitionSubTypeBottom = 3,
};

@class UIWindow;
@class EstablishmentPickerViewController;
@class FIRDatabaseReference;
@class UIApplication;

SWIFT_CLASS("_TtC17HafsaInspectorApp11AppDelegate")
@interface AppDelegate : UIResponder <UIApplicationDelegate>
@property (nonatomic, strong) UIWindow * _Nullable window;
@property (nonatomic, strong) EstablishmentPickerViewController * _Nonnull vc;
@property (nonatomic) NSInteger errorCount;
@property (nonatomic, strong) FIRDatabaseReference * _Null_unspecified ref;
- (BOOL)application:(UIApplication * _Nonnull)application willFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions;
- (BOOL)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions;
- (void)applicationWillResignActive:(UIApplication * _Nonnull)application;
- (void)applicationDidEnterBackground:(UIApplication * _Nonnull)application;
- (void)applicationWillEnterForeground:(UIApplication * _Nonnull)application;
- (void)applicationDidBecomeActive:(UIApplication * _Nonnull)application;
- (void)applicationWillTerminate:(UIApplication * _Nonnull)application;
- (void)getData;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CAShapeLayer;
@class UIImage;
enum MaterialGravity : NSInteger;
@class UIColor;
@class CALayer;

SWIFT_CLASS_NAMED("View")
@interface View : UIView
/**
  A CAShapeLayer used to manage elements that would be affected by
  the clipToBounds property of the backing layer. For example, this
  allows the dropshadow effect on the backing layer, while clipping
  the image to a desired shape within the visualLayer.
*/
@property (nonatomic, readonly, strong) CAShapeLayer * _Nonnull visualLayer;
/**
  A property that manages an image for the visualLayer’s contents
  property. Images should not be set to the backing layer’s contents
  property to avoid conflicts when using clipsToBounds.
*/
@property (nonatomic, strong) UIImage * _Nullable image;
/**
  Allows a relative subrectangle within the range of 0 to 1 to be
  specified for the visualLayer’s contents property. This allows
  much greater flexibility than the contentsGravity property in
  terms of how the image is cropped and stretched.
*/
@property (nonatomic) CGRect contentsRect;
/**
  A CGRect that defines a stretchable region inside the visualLayer
  with a fixed border around the edge.
*/
@property (nonatomic) CGRect contentsCenter;
/**
  A floating point value that defines a ratio between the pixel
  dimensions of the visualLayer’s contents property and the size
  of the view. By default, this value is set to the Device.scale.
*/
@property (nonatomic) CGFloat contentsScale;
/**
  A Preset for the contentsGravity property.
*/
@property (nonatomic) enum MaterialGravity contentsGravityPreset;
/**
  Determines how content should be aligned within the visualLayer’s bounds.
*/
@property (nonatomic, copy) NSString * _Nonnull contentsGravity;
/**
  A property that accesses the backing layer’s backgroundColor.
*/
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/**
  An initializer that initializes the object with a NSCoder object.
  \param aDecoder A NSCoder instance.

*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  An initializer that initializes the object with a CGRect object.
  If AutoLayout is used, it is better to initilize the instance
  using the init() initializer.
  \param frame A CGRect instance.

*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  A convenience initializer.
*/
- (nonnull instancetype)init;
- (void)layoutSublayersOfLayer:(CALayer * _Nonnull)layer;
- (void)layoutSubviews;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
/**
  Prepares the visualLayer property.
*/
- (void)prepareVisualLayer;
/**
  Manages the layout for the visualLayer property.
*/
- (void)layoutVisualLayer;
@end

enum ContentViewAlignment : NSInteger;
enum EdgeInsetsPreset : NSInteger;
enum InterimSpacePreset : NSInteger;

SWIFT_CLASS("_TtC17HafsaInspectorApp3Bar")
@interface Bar : View
/**
  Should center the contentView.
*/
@property (nonatomic) enum ContentViewAlignment contentViewAlignment;
/**
  Will render the view.
*/
@property (nonatomic, readonly) BOOL willLayout;
/**
  A preset wrapper around contentInset.
*/
@property (nonatomic) enum EdgeInsetsPreset contentEdgeInsetsPreset;
/**
  A wrapper around grid.contentInset.
*/
@property (nonatomic) UIEdgeInsets contentEdgeInsets;
/**
  A preset wrapper around interimSpace.
*/
@property (nonatomic) enum InterimSpacePreset interimSpacePreset;
/**
  A wrapper around grid.interimSpace.
*/
@property (nonatomic) CGFloat interimSpace;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/**
  Grid cell factor.
*/
@property (nonatomic) CGFloat gridFactor;
/**
  ContentView that holds the any desired subviews.
*/
@property (nonatomic, readonly, strong) View * _Nonnull contentView;
/**
  Left side UIViews.
*/
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull leftViews;
/**
  Right side UIViews.
*/
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull rightViews;
/**
  An initializer that initializes the object with a NSCoder object.
  \param aDecoder A NSCoder instance.

*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  An initializer that initializes the object with a CGRect object.
  If AutoLayout is used, it is better to initilize the instance
  using the init() initializer.
  \param frame A CGRect instance.

*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  Basic initializer.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  A convenience initializer with parameter settings.
  \param leftViews An Array of UIViews that go on the left side.

  \param rightViews An Array of UIViews that go on the right side.

*/
- (nonnull instancetype)initWithLeftViews:(NSArray<UIView *> * _Nullable)leftViews rightViews:(NSArray<UIView *> * _Nullable)rightViews OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BorderWidthPreset, "BorderWidthPreset") {
  BorderWidthPresetNone = 0,
  BorderWidthPresetBorder1 = 1,
  BorderWidthPresetBorder2 = 2,
  BorderWidthPresetBorder3 = 3,
  BorderWidthPresetBorder4 = 4,
  BorderWidthPresetBorder5 = 5,
  BorderWidthPresetBorder6 = 6,
  BorderWidthPresetBorder7 = 7,
  BorderWidthPresetBorder8 = 8,
  BorderWidthPresetBorder9 = 9,
};

enum BottomNavigationTransitionAnimation : NSInteger;
@class NSBundle;
@class UIViewController;
@protocol UIViewControllerAnimatedTransitioning;

SWIFT_CLASS("_TtC17HafsaInspectorApp26BottomNavigationController")
@interface BottomNavigationController : UITabBarController <UITabBarControllerDelegate>
/**
  The transition animation to use when selecting a new tab.
*/
@property (nonatomic) enum BottomNavigationTransitionAnimation transitionAnimation;
/**
  An initializer that initializes the object with a NSCoder object.
  \param aDecoder A NSCoder instance.

*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  An initializer that initializes the object with an Optional nib and bundle.
  \param nibNameOrNil An Optional String for the nib.

  \param bundle An Optional NSBundle where the nib is located.

*/
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
/**
  An initializer that accepts no parameters.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  An initializer that initializes the object an Array of UIViewControllers.
  \param viewControllers An Array of UIViewControllers.

*/
- (nonnull instancetype)initWithViewControllers:(NSArray<UIViewController *> * _Nonnull)viewControllers OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillLayoutSubviews;
- (void)layoutSubviews;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
/**
  Handles transitions when tabBarItems are pressed.
*/
- (id <UIViewControllerAnimatedTransitioning> _Nullable)tabBarController:(UITabBarController * _Nonnull)tabBarController animationControllerForTransitionFromViewController:(UIViewController * _Nonnull)fromVC toViewController:(UIViewController * _Nonnull)toVC;
@end

@protocol UIViewControllerContextTransitioning;

SWIFT_CLASS("_TtC17HafsaInspectorApp41BottomNavigationFadeAnimatedTransitioning")
@interface BottomNavigationFadeAnimatedTransitioning : NSObject <UIViewControllerAnimatedTransitioning>
- (void)animateTransition:(id <UIViewControllerContextTransitioning> _Nonnull)transitionContext;
- (NSTimeInterval)transitionDuration:(id <UIViewControllerContextTransitioning> _Nullable)transitionContext;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BottomNavigationTransitionAnimation, "BottomNavigationTransitionAnimation") {
  BottomNavigationTransitionAnimationNone = 0,
  BottomNavigationTransitionAnimationFade = 1,
};


SWIFT_CLASS("_TtC17HafsaInspectorApp12BottomTabBar")
@interface BottomTabBar : UITabBar
/**
  Automatically aligns the BottomNavigationBar to the superview.
*/
@property (nonatomic) BOOL isAlignedToParentAutomatically;
/**
  A property that accesses the backing layer’s backgroundColor.
*/
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/**
  An initializer that initializes the object with a CGRect object.
  If AutoLayout is used, it is better to initilize the instance
  using the init() initializer.
  \param frame A CGRect instance.

*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  A convenience initializer.
*/
- (nonnull instancetype)init;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSublayersOfLayer:(CALayer * _Nonnull)layer;
- (void)layoutSubviews;
- (void)didMoveToSuperview;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
@end

enum PulseAnimation : NSInteger;
@class UITouch;
@class UIEvent;

SWIFT_CLASS_NAMED("Button")
@interface Button : UIButton
/**
  A CAShapeLayer used to manage elements that would be affected by
  the clipToBounds property of the backing layer. For example, this
  allows the dropshadow effect on the backing layer, while clipping
  the image to a desired shape within the visualLayer.
*/
@property (nonatomic, readonly, strong) CAShapeLayer * _Nonnull visualLayer;
/**
  An Array of pulse layers.
*/
@property (nonatomic, readonly, copy) NSArray<CAShapeLayer *> * _Nonnull pulseLayers;
/**
  The opacity value for the pulse animation.
*/
@property (nonatomic) CGFloat pulseOpacity;
/**
  The color of the pulse effect.
*/
@property (nonatomic, strong) UIColor * _Nonnull pulseColor;
/**
  The type of PulseAnimation.
*/
@property (nonatomic) enum PulseAnimation pulseAnimation;
/**
  A property that accesses the backing layer’s backgroundColor.
*/
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/**
  A preset property for updated contentEdgeInsets.
*/
@property (nonatomic) enum EdgeInsetsPreset contentEdgeInsetsPreset;
/**
  Sets the normal and highlighted image for the button.
*/
@property (nonatomic, strong) UIImage * _Nullable image;
/**
  Sets the normal and highlighted title for the button.
*/
@property (nonatomic, copy) NSString * _Nullable title;
/**
  Sets the normal and highlighted titleColor for the button.
*/
@property (nonatomic, strong) UIColor * _Nullable titleColor;
/**
  An initializer that initializes the object with a NSCoder object.
  \param aDecoder A NSCoder instance.

*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  An initializer that initializes the object with a CGRect object.
  If AutoLayout is used, it is better to initilize the instance
  using the init() initializer.
  \param frame A CGRect instance.

*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  A convenience initializer.
*/
- (nonnull instancetype)init;
/**
  A convenience initializer that acceps an image.
  \param image A UIImage.

*/
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image;
/**
  A convenience initializer that acceps an image and tintColor.
  \param image A UIImage.

  \param tintColor A UIColor.

*/
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image tintColor:(UIColor * _Nullable)tintColor;
/**
  A convenience initializer that acceps a title.
  \param title A String.

*/
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title;
/**
  A convenience initializer that acceps a title and titleColor.
  \param title A String.

  \param titleColor A UIColor.

*/
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title titleColor:(UIColor * _Nullable)titleColor;
- (void)layoutSublayersOfLayer:(CALayer * _Nonnull)layer;
- (void)layoutSubviews;
/**
  A delegation method that is executed when the view has began a
  touch event.
  \param touches A set of UITouch objects.

  \param event A UIEvent object.

*/
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/**
  A delegation method that is executed when the view touch event has
  ended.
  \param touches A set of UITouch objects.

  \param event A UIEvent object.

*/
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/**
  A delegation method that is executed when the view touch event has
  been cancelled.
  \param touches A set of UITouch objects.

  \param event A UIEvent object.

*/
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
/**
  Prepares the visualLayer property.
*/
- (void)prepareVisualLayer;
/**
  Manages the layout for the visualLayer property.
*/
- (void)layoutVisualLayer;
@end

enum ShapePreset : NSInteger;
enum DepthPreset : NSInteger;
enum CornerRadiusPreset : NSInteger;
@class CAAnimation;

@interface CALayer (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  A property that accesses the frame.origin.x property.
*/
@property (nonatomic) CGFloat x;
/**
  A property that accesses the frame.origin.y property.
*/
@property (nonatomic) CGFloat y;
/**
  A property that accesses the frame.size.width property.
*/
@property (nonatomic) CGFloat width;
/**
  A property that accesses the frame.size.height property.
*/
@property (nonatomic) CGFloat height;
/**
  A property that manages the overall shape for the object. If either the
  width or height property is set, the other will be automatically adjusted
  to maintain the shape of the object.
*/
@property (nonatomic) enum ShapePreset shapePreset;
/**
  A preset value for Depth.
*/
@property (nonatomic) enum DepthPreset depthPreset;
/**
  Enables automatic shadowPath sizing.
*/
@property (nonatomic) BOOL isShadowPathAutoSizing;
/**
  A property that sets the cornerRadius of the backing layer.
*/
@property (nonatomic) enum CornerRadiusPreset cornerRadiusPreset;
/**
  A preset property to set the borderWidth.
*/
@property (nonatomic) enum BorderWidthPreset borderWidthPreset;
/**
  A UIColor reference to the \code
  backgroundColor.cgColor
  \endcode.
*/
@property (nonatomic, strong) UIColor * _Nullable color;
/**
  A method that accepts CAAnimation objects and executes them on the
  view’s backing layer.
  \param animation A CAAnimation instance.

*/
- (void)animateWithAnimation:(CAAnimation * _Nonnull)animation;
/**
  A delegation method that is executed when the backing layer stops
  running an animation.
  \param animation The CAAnimation instance that stopped running.

  \param flag A boolean that indicates if the animation stopped
  because it was completed or interrupted. True if completed, false
  if interrupted.

*/
- (void)animationDidStop:(CAAnimation * _Nonnull)animation finished:(BOOL)flag;
/**
  Manages the layout for the shape of the view instance.
*/
- (void)layoutShape;
/**
  Sets the shadow path.
*/
- (void)layoutShadowPath;
@end

enum CaptureMode : NSInteger;
@class CapturePreview;
@class CaptureSession;
@class Layer;
@class UITapGestureRecognizer;
@protocol CaptureDelegate;

SWIFT_CLASS("_TtC17HafsaInspectorApp7Capture")
@interface Capture : View <UIGestureRecognizerDelegate>
/**
  A delegation reference.
*/
@property (nonatomic, weak) id <CaptureDelegate> _Nullable delegate;
/**
  A reference to the capture mode.
*/
@property (nonatomic) enum CaptureMode captureMode;
/**
  A boolean indicating whether to enable tap to focus.
*/
@property (nonatomic) BOOL enableTapToFocus;
/**
  A boolean indicating whether to enable tap to expose.
*/
@property (nonatomic) BOOL enableTapToExpose;
/**
  A boolean indicating whether to enable tap to reset.
*/
@property (nonatomic) BOOL enableTapToReset;
/**
  Insets preset value for content.
*/
@property (nonatomic) enum EdgeInsetsPreset contentEdgeInsetsPreset;
/**
  Content insert value.
*/
@property (nonatomic) UIEdgeInsets contentInset;
/**
  A reference to the CapturePreview view.
*/
@property (nonatomic, strong) CapturePreview * _Null_unspecified previewView;
/**
  A reference to the CaptureSession.
*/
@property (nonatomic, strong) CaptureSession * _Null_unspecified captureSession;
/**
  A reference to the focus layer used in focus animations.
*/
@property (nonatomic, strong) Layer * _Nullable focusLayer;
/**
  A reference to the exposure layer used in exposure animations.
*/
@property (nonatomic, strong) Layer * _Nullable exposureLayer;
/**
  A reference to the reset layer used in reset animations.
*/
@property (nonatomic, strong) Layer * _Nullable resetLayer;
/**
  A reference to the cameraButton.
*/
@property (nonatomic, strong) UIButton * _Nullable cameraButton;
/**
  A reference to the captureButton.
*/
@property (nonatomic, strong) UIButton * _Nullable captureButton;
/**
  A reference to the videoButton.
*/
@property (nonatomic, strong) UIButton * _Nullable videoButton;
/**
  A reference to the switchCameraButton.
*/
@property (nonatomic, strong) UIButton * _Nullable switchCamerasButton;
/**
  A reference to the flashButton.
*/
@property (nonatomic, strong) UIButton * _Nullable flashButton;
/**
  A convenience initializer.
*/
- (nonnull instancetype)init;
- (void)layoutSubviews;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
/**
  Reloads the view.
*/
- (void)reloadView;
/**
  Starts the timer for recording.
*/
- (void)startTimer;
/**
  Updates the timer when recording.
*/
- (void)updateTimer;
/**
  Stops the timer when recording.
*/
- (void)stopTimer;
/**
  Handler for the flashButton.
  \param button A UIButton that is associated with the event.

*/
- (void)handleFlashButtonWithButton:(UIButton * _Nonnull)button;
/**
  Handler for the switchCameraButton.
  \param button A UIButton that is associated with the event.

*/
- (void)handleSwitchCamerasButtonWithButton:(UIButton * _Nonnull)button;
/**
  Handler for the captureButton.
  \param button A UIButton that is associated with the event.

*/
- (void)handleCaptureButtonWithButton:(UIButton * _Nonnull)button;
/**
  Handler for the cameraButton.
  \param button A UIButton that is associated with the event.

*/
- (void)handleCameraButtonWithButton:(UIButton * _Nonnull)button;
/**
  Handler for the videoButton.
  \param button A UIButton that is associated with the event.

*/
- (void)handleVideoButtonWithButton:(UIButton * _Nonnull)button;
/**
  Handler for the tapToFocusGesture.
  \param recognizer A UITapGestureRecognizer that is associated with the event.

*/
- (void)handleTapToFocusGestureWithRecognizer:(UITapGestureRecognizer * _Nonnull)recognizer;
/**
  Handler for the tapToExposeGesture.
  \param recognizer A UITapGestureRecognizer that is associated with the event.

*/
- (void)handleTapToExposeGestureWithRecognizer:(UITapGestureRecognizer * _Nonnull)recognizer;
/**
  Handler for the tapToResetGesture.
  \param recognizer A UITapGestureRecognizer that is associated with the event.

*/
- (void)handleTapToResetGestureWithRecognizer:(UITapGestureRecognizer * _Nonnull)recognizer;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("CaptureDelegate")
@protocol CaptureDelegate
@optional
/**
  A delegation method that is fired when the record timer has started.
  \param capture A reference to the calling capture.

*/
- (void)captureDidStartRecordTimerWithCapture:(Capture * _Nonnull)capture;
/**
  A delegation method that is fired when the record timer was updated.
  \param capture A reference to the calling capture.

  \param hours An integer representing hours.

  \param minutes An integer representing minutes.

  \param seconds An integer representing seconds.

*/
- (void)captureDidUpdateRecordTimerWithCapture:(Capture * _Nonnull)capture hours:(NSInteger)hours minutes:(NSInteger)minutes seconds:(NSInteger)seconds;
/**
  A delegation method that is fired when the record timer has stopped.
  \param capture A reference to the calling capture.

  \param hours An integer representing hours.

  \param minutes An integer representing minutes.

  \param seconds An integer representing seconds.

*/
- (void)captureDidStopRecordTimerWithCapture:(Capture * _Nonnull)capture hours:(NSInteger)hours minutes:(NSInteger)minutes seconds:(NSInteger)seconds;
/**
  A delegation method that is fired when the user tapped to adjust the focus.
  \param capture A reference to the calling capture.

  \param point CGPoint that the user tapped at.

*/
- (void)captureDidTapToFocusAtPointWithCapture:(Capture * _Nonnull)capture point:(CGPoint)point;
/**
  A delegation method that is fired when the user tapped to adjust the exposure.
  \param capture A reference to the calling capture.

  \param point CGPoint that the user tapped at.

*/
- (void)captureDidTapToExposeAtPointWithCapture:(Capture * _Nonnull)capture point:(CGPoint)point;
/**
  A delegation method that is fired when the user tapped to reset.
  \param capture A reference to the calling capture.

  \param point CGPoint that the user tapped at.

*/
- (void)captureDidTapToResetAtPointWithCapture:(Capture * _Nonnull)capture point:(CGPoint)point;
/**
  A delegation method that is fired when the user pressed the flash button.
  \param capture A reference to the calling capture.

  \param button A reference to the UIButton that the user pressed.

*/
- (void)captureDidPressFlashButtonWithCapture:(Capture * _Nonnull)capture button:(UIButton * _Nonnull)button;
/**
  A delegation method that is fired when the user pressed the switch camera button.
  \param capture A reference to the calling capture.

  \param button A reference to the UIButton that the user pressed.

*/
- (void)captureDidPressSwitchCamerasButtonWithCapture:(Capture * _Nonnull)capture button:(UIButton * _Nonnull)button;
/**
  A delegation method that is fired when the user pressed capture button.
  \param capture A reference to the calling capture.

  \param button A reference to the UIButton that the user pressed.

*/
- (void)captureDidPressCaptureButtonWithCapture:(Capture * _Nonnull)capture button:(UIButton * _Nonnull)button;
/**
  A delegation method that is fired when the user enabled the photo camera.
  \param capture A reference to the calling capture.

  \param button A reference to the UIButton that the user pressed.

*/
- (void)captureDidPressCameraButtonWithCapture:(Capture * _Nonnull)capture button:(UIButton * _Nonnull)button;
/**
  A delegation method that is fired when the user enabled the video camera.
  \param capture A reference to the calling capture.

  \param button A reference to the UIButton that the user pressed.

*/
- (void)captureDidPressVideoButtonWithCapture:(Capture * _Nonnull)capture button:(UIButton * _Nonnull)button;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, CaptureMode, "CaptureMode") {
  CaptureModePhoto = 0,
  CaptureModeVideo = 1,
};


SWIFT_CLASS("_TtC17HafsaInspectorApp14CapturePreview")
@interface CapturePreview : View
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass;
/**
  Converts a point in layer coordinates to a point of interest
  in the coordinate space of the capture device providing input
  to the layer.

  returns:
  A CGPoint that is converted.
*/
- (CGPoint)captureDevicePointOfInterestForPointWithPoint:(CGPoint)point;
/**
  Converts a point of interest in the coordinate space of the
  capture device providing input to the layer to a point in
  layer coordinates.

  returns:
  A CGPoint that is converted.
*/
- (CGPoint)pointForCaptureDevicePointOfInterestWithPoint:(CGPoint)point;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

@class AVCaptureSession;
@class AVCaptureDevice;
enum CaptureSessionPreset : NSInteger;
@class AVCaptureFileOutput;
@protocol CaptureSessionDelegate;

SWIFT_CLASS_NAMED("CaptureSession")
@interface CaptureSession : NSObject <AVCaptureFileOutputRecordingDelegate>
/**
  A reference to the AVCaptureSession.
*/
@property (nonatomic, strong) AVCaptureSession * _Null_unspecified session;
/**
  A boolean indicating if the session is running.
*/
@property (nonatomic) BOOL isRunning;
/**
  A boolean indicating if the session is recording.
*/
@property (nonatomic) BOOL isRecording;
/**
  A reference to the recorded time duration.
*/
@property (nonatomic, readonly) CMTime recordedDuration;
/**
  An optional reference to the active camera if one exists.
*/
@property (nonatomic, readonly, strong) AVCaptureDevice * _Nullable activeCamera;
/**
  An optional reference to the inactive camera if one exists.
*/
@property (nonatomic, readonly, strong) AVCaptureDevice * _Nullable inactiveCamera;
/**
  Available number of cameras.
*/
@property (nonatomic, readonly) NSInteger cameraCount;
/**
  A boolean indicating whether the camera can switch to another.
*/
@property (nonatomic, readonly) BOOL canSwitchCameras;
/**
  A booealn indicating whether the camrea supports focus.
*/
@property (nonatomic, readonly) BOOL isFocusPointOfInterestSupported;
/**
  A booealn indicating whether the camrea supports exposure.
*/
@property (nonatomic, readonly) BOOL isExposurePointOfInterestSupported;
/**
  A boolean indicating if the active camera has flash.
*/
@property (nonatomic, readonly) BOOL hasFlash;
/**
  A boolean indicating if the active camera has a torch.
*/
@property (nonatomic, readonly) BOOL hasTorch;
/**
  A reference to the focusMode.
*/
@property (nonatomic) AVCaptureFocusMode focusMode;
/**
  A reference to the flashMode.
*/
@property (nonatomic) AVCaptureFlashMode flashMode;
/**
  A reference to the torchMode.
*/
@property (nonatomic) AVCaptureTorchMode torchMode;
/**
  The session quality preset.
*/
@property (nonatomic) enum CaptureSessionPreset preset;
/**
  The capture video orientation.
*/
@property (nonatomic, readonly) AVCaptureVideoOrientation videoOrientation;
/**
  A delegation property for CaptureSessionDelegate.
*/
@property (nonatomic, weak) id <CaptureSessionDelegate> _Nullable delegate;
/**
  Initializer.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Starts the session.
*/
- (void)startSession;
/**
  Stops the session.
*/
- (void)stopSession;
/**
  Switches the camera if possible.
*/
- (void)switchCameras;
/**
  Checks if a given focus mode is supported.
  \param focusMode An AVCaptureFocusMode.


  returns:
  A boolean of the result, true if supported, false otherwise.
*/
- (BOOL)isFocusModeSupportedWithFocusMode:(AVCaptureFocusMode)focusMode;
/**
  Checks if a given exposure mode is supported.
  \param exposureMode An AVCaptureExposureMode.


  returns:
  A boolean of the result, true if supported, false otherwise.
*/
- (BOOL)isExposureModeSupportedWithExposureMode:(AVCaptureExposureMode)exposureMode;
/**
  Checks if a given flash mode is supported.
  \param flashMode An AVCaptureFlashMode.


  returns:
  A boolean of the result, true if supported, false otherwise.
*/
- (BOOL)isFlashModeSupportedWithFlashMode:(AVCaptureFlashMode)flashMode;
/**
  Checks if a given torch mode is supported.
  \param torchMode An AVCaptureTorchMode.


  returns:
  A boolean of the result, true if supported, false otherwise.
*/
- (BOOL)isTorchModeSupportedWithTorchMode:(AVCaptureTorchMode)torchMode;
/**
  Focuses the camera at a given point.
  \param at A CGPoint to focus at.

*/
- (void)focusAt:(CGPoint)point;
/**
  Exposes the camera at a given point.
  \param at A CGPoint to expose at.

*/
- (void)exposeAt:(CGPoint)point;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
/**
  Resets the camera focus and exposure.
  \param focus A boolean indicating to reset the focus.

  \param exposure A boolean indicating to reset the exposure.

*/
- (void)resetWithFocus:(BOOL)focus exposure:(BOOL)exposure;
/**
  Captures a still image.
*/
- (void)captureStillImage;
/**
  Starts recording.
*/
- (void)startRecording;
/**
  Stops recording.
*/
- (void)stopRecording;
- (void)captureOutput:(AVCaptureFileOutput * _Null_unspecified)captureOutput didStartRecordingToOutputFileAtURL:(NSURL * _Null_unspecified)fileURL fromConnections:(NSArray * _Null_unspecified)connections;
- (void)captureOutput:(AVCaptureFileOutput * _Null_unspecified)captureOutput didFinishRecordingToOutputFileAtURL:(NSURL * _Null_unspecified)outputFileURL fromConnections:(NSArray * _Null_unspecified)connections error:(NSError * _Null_unspecified)error;
@end

@class NSURL;

SWIFT_PROTOCOL_NAMED("CaptureSessionDelegate")
@protocol CaptureSessionDelegate
@optional
/**
  A delegation method that is fired when the captureSesstion failes with an error.
  \param captureSession A reference to the calling CaptureSession.

  \param error A Error corresponding to the error.

*/
- (void)captureSessionFailedWithErrorWithCaptureSession:(CaptureSession * _Nonnull)captureSession error:(NSError * _Nonnull)error;
/**
  A delegation method that is fired when the camera has been switched to another.
  \param captureSession A reference to the calling CaptureSession.

  \param position An AVCaptureDevicePosition that the camera has switched to.

*/
- (void)captureSessionDidSwitchCamerasWithCaptureSession:(CaptureSession * _Nonnull)captureSession position:(AVCaptureDevicePosition)position;
/**
  A delegation method that is fired before the camera has been switched to another.
  \param captureSession A reference to the calling CaptureSession.

  \param position An AVCaptureDevicePosition that the camera will switch to.

*/
- (void)captureSessionWillSwitchCamerasWithCaptureSession:(CaptureSession * _Nonnull)captureSession position:(AVCaptureDevicePosition)position;
/**
  A delegation method that is fired when an image has been captured asynchronously.
  \param captureSession A reference to the calling CaptureSession.

  \param image An image that has been captured.

*/
- (void)captureSessionStillImageAsynchronouslyWithCaptureSession:(CaptureSession * _Nonnull)captureSession image:(UIImage * _Nonnull)image;
/**
  A delegation method that is fired when capturing an image asynchronously has failed.
  \param captureSession A reference to the calling CaptureSession.

  \param error A Error corresponding to the error.

*/
- (void)captureSessionStillImageAsynchronouslyFailedWithErrorWithCaptureSession:(CaptureSession * _Nonnull)captureSession error:(NSError * _Nonnull)error;
/**
  A delegation method that is fired when creating a movie file has failed.
  \param captureSession A reference to the calling CaptureSession.

  \param error A Error corresponding to the error.

*/
- (void)captureSessionCreateMovieFileFailedWithErrorWithCaptureSession:(CaptureSession * _Nonnull)captureSession error:(NSError * _Nonnull)error;
/**
  A delegation method that is fired when capturing a movie has failed.
  \param captureSession A reference to the calling CaptureSession.

  \param error A Error corresponding to the error.

*/
- (void)captureSessionMovieFailedWithErrorWithCaptureSession:(CaptureSession * _Nonnull)captureSession error:(NSError * _Nonnull)error;
/**
  A delegation method that is fired when a session started recording and writing
  to a file.
  \param captureSession A reference to the calling CaptureSession.

  \param captureOut An AVCaptureFileOutput.

  \param fileURL A file URL.

  \param fromConnections An array of Anys.

*/
- (void)captureSessionDidStartRecordingToOutputFileAtURLWithCaptureSession:(CaptureSession * _Nonnull)captureSession captureOutput:(AVCaptureFileOutput * _Nonnull)captureOutput fileURL:(NSURL * _Nonnull)fileURL fromConnections:(NSArray * _Nonnull)connections;
/**
  A delegation method that is fired when a session finished recording and writing
  to a file.
  \param captureSession A reference to the calling CaptureSession.

  \param captureOut An AVCaptureFileOutput.

  \param fileURL A file URL.

  \param fromConnections An array of Anys.

  \param error A Error corresponding to an error.

*/
- (void)captureSessionDidFinishRecordingToOutputFileAtURLWithCaptureSession:(CaptureSession * _Nonnull)captureSession captureOutput:(AVCaptureFileOutput * _Nonnull)captureOutput outputFileURL:(NSURL * _Nonnull)outputFileURL fromConnections:(NSArray * _Nonnull)connections error:(NSError * _Null_unspecified)error;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, CaptureSessionPreset, "CaptureSessionPreset") {
  CaptureSessionPresetPresetPhoto = 0,
  CaptureSessionPresetPresetHigh = 1,
  CaptureSessionPresetPresetMedium = 2,
  CaptureSessionPresetPresetLow = 3,
  CaptureSessionPresetPreset352x288 = 4,
  CaptureSessionPresetPreset640x480 = 5,
  CaptureSessionPresetPreset1280x720 = 6,
  CaptureSessionPresetPreset1920x1080 = 7,
  CaptureSessionPresetPreset3840x2160 = 8,
  CaptureSessionPresetPresetiFrame960x540 = 9,
  CaptureSessionPresetPresetiFrame1280x720 = 10,
  CaptureSessionPresetPresetInputPriority = 11,
};


SWIFT_CLASS("_TtC17HafsaInspectorApp9PulseView")
@interface PulseView : View
/**
  An Array of pulse layers.
*/
@property (nonatomic, readonly, copy) NSArray<CAShapeLayer *> * _Nonnull pulseLayers;
/**
  The opcaity value for the pulse animation.
*/
@property (nonatomic) CGFloat pulseOpacity;
/**
  The color of the pulse effect.
*/
@property (nonatomic, strong) UIColor * _Nonnull pulseColor;
/**
  The type of PulseAnimation.
*/
@property (nonatomic) enum PulseAnimation pulseAnimation;
/**
  A delegation method that is executed when the view has began a
  touch event.
  \param touches A set of UITouch objects.

  \param event A UIEvent object.

*/
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/**
  A delegation method that is executed when the view touch event has
  ended.
  \param touches A set of UITouch objects.

  \param event A UIEvent object.

*/
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/**
  A delegation method that is executed when the view touch event has
  been cancelled.
  \param touches A set of UITouch objects.

  \param event A UIEvent object.

*/
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

@class UILabel;
@class Toolbar;

SWIFT_CLASS("_TtC17HafsaInspectorApp4Card")
@interface Card : PulseView
/**
  :name:	dividerLayer
*/
@property (nonatomic, strong) CAShapeLayer * _Nullable dividerLayer;
/**
  :name:	dividerColor
*/
@property (nonatomic, strong) UIColor * _Nullable dividerColor;
/**
  :name:	divider
*/
@property (nonatomic) BOOL divider;
/**
  :name:	dividerInsets
*/
@property (nonatomic) enum EdgeInsetsPreset dividerEdgeInsetsPreset;
/**
  :name:	dividerInset
*/
@property (nonatomic) UIEdgeInsets dividerInset;
/**
  :name:	contentInsets
*/
@property (nonatomic) enum EdgeInsetsPreset contentEdgeInsetsPreset;
/**
  :name:	contentInset
*/
@property (nonatomic) UIEdgeInsets contentInset;
/**
  :name:	titleLabelInsets
*/
@property (nonatomic) enum EdgeInsetsPreset titleLabelEdgeInsetsPreset;
/**
  :name:	titleLabelInset
*/
@property (nonatomic) UIEdgeInsets titleLabelInset;
/**
  :name:	titleLabel
*/
@property (nonatomic, strong) UILabel * _Nullable titleLabel;
@property (nonatomic, strong) Toolbar * _Nonnull toolbar;
/**
  :name:	contentViewInsets
*/
@property (nonatomic) enum EdgeInsetsPreset contentViewEdgeInsetsPreset;
/**
  :name:	contentViewInset
*/
@property (nonatomic) UIEdgeInsets contentViewInset;
/**
  :name:	contentView
*/
@property (nonatomic, strong) UIView * _Nullable contentView;
/**
  :name:	leftButtonsInsets
*/
@property (nonatomic) enum EdgeInsetsPreset leftButtonsEdgeInsetsPreset;
/**
  :name:	leftButtonsInset
*/
@property (nonatomic) UIEdgeInsets leftButtonsInset;
/**
  :name:	leftButtons
*/
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull leftButtons;
/**
  :name:	rightButtonsInsets
*/
@property (nonatomic) enum EdgeInsetsPreset rightButtonsEdgeInsetsPreset;
/**
  :name:	rightButtonsInset
*/
@property (nonatomic) UIEdgeInsets rightButtonsInset;
/**
  :name:	rightButtons
*/
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull rightButtons;
/**
  :name:	init
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :name:	init
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  :name:	init
*/
- (nonnull instancetype)init;
/**
  :name:	init
*/
- (nullable instancetype)initWithImage:(UIImage * _Nullable)image titleLabel:(UILabel * _Nullable)titleLabel contentView:(UIView * _Nullable)contentView leftButtons:(NSArray<UIView *> * _Nullable)leftButtons rightButtons:(NSArray<UIView *> * _Nullable)rightButtons;
/**
  :name:	layoutSublayersOfLayer
*/
- (void)layoutSublayersOfLayer:(CALayer * _Nonnull)layer;
/**
  :name:	reloadView
*/
- (void)reloadView;
/**
  :name:	prepare
*/
- (void)prepare;
/**
  :name:	prepareDivider
*/
- (void)prepareDividerWithY:(CGFloat)y width:(CGFloat)width;
/**
  :name:	prepareProperties
*/
- (void)preparePropertiesWithImage:(UIImage * _Nullable)image titleLabel:(UILabel * _Nullable)titleLabel contentView:(UIView * _Nullable)contentView leftButtons:(NSArray<UIView *> * _Nullable)leftButtons rightButtons:(NSArray<UIView *> * _Nullable)rightButtons;
@end

@class UIPickerView;
@class UITextField;
@class HITextField;

SWIFT_CLASS("_TtC17HafsaInspectorApp27ChapterPickerViewController")
@interface ChapterPickerViewController : UIViewController <UITextFieldDelegate>
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified nextButton;
@property (nonatomic, weak) IBOutlet HITextField * _Null_unspecified chapterTextField;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified chapterLabel;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull chapterData;
@property (nonatomic, readonly, strong) UIPickerView * _Nonnull picker;
+ (ChapterPickerViewController * _Nonnull)create;
- (void)viewDidLoad;
- (void)setupView;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (IBAction)nextButtonPressed:(id _Nonnull)sender;
- (void)backButtonPressed;
- (void)saveData;
- (void)didGetChapterData;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("CollectionReusableView")
@interface CollectionReusableView : UICollectionReusableView
/**
  A CAShapeLayer used to manage elements that would be affected by
  the clipToBounds property of the backing layer. For example, this
  allows the dropshadow effect on the backing layer, while clipping
  the image to a desired shape within the visualLayer.
*/
@property (nonatomic, readonly, strong) CAShapeLayer * _Nonnull visualLayer;
/**
  An Array of pulse layers.
*/
@property (nonatomic, readonly, copy) NSArray<CAShapeLayer *> * _Nonnull pulseLayers;
/**
  The opcaity value for the pulse animation.
*/
@property (nonatomic) CGFloat pulseOpacity;
/**
  The color of the pulse effect.
*/
@property (nonatomic, strong) UIColor * _Nonnull pulseColor;
/**
  The type of PulseAnimation.
*/
@property (nonatomic) enum PulseAnimation pulseAnimation;
/**
  A property that manages an image for the visualLayer’s contents
  property. Images should not be set to the backing layer’s contents
  property to avoid conflicts when using clipsToBounds.
*/
@property (nonatomic, strong) UIImage * _Nullable image;
/**
  Allows a relative subrectangle within the range of 0 to 1 to be
  specified for the visualLayer’s contents property. This allows
  much greater flexibility than the contentsGravity property in
  terms of how the image is cropped and stretched.
*/
@property (nonatomic) CGRect contentsRect;
/**
  A CGRect that defines a stretchable region inside the visualLayer
  with a fixed border around the edge.
*/
@property (nonatomic) CGRect contentsCenter;
/**
  A floating point value that defines a ratio between the pixel
  dimensions of the visualLayer’s contents property and the size
  of the view. By default, this value is set to the Device.scale.
*/
@property (nonatomic) CGFloat contentsScale;
/**
  A Preset for the contentsGravity property.
*/
@property (nonatomic) enum MaterialGravity contentsGravityPreset;
/**
  Determines how content should be aligned within the visualLayer’s bounds.
*/
@property (nonatomic, copy) NSString * _Nonnull contentsGravity;
/**
  A preset wrapper around contentInset.
*/
@property (nonatomic) enum EdgeInsetsPreset contentEdgeInsetsPreset;
/**
  A wrapper around grid.contentInset.
*/
@property (nonatomic) UIEdgeInsets contentInset;
/**
  A preset wrapper around interimSpace.
*/
@property (nonatomic) enum InterimSpacePreset interimSpacePreset;
/**
  A wrapper around grid.interimSpace.
*/
@property (nonatomic) CGFloat interimSpace;
/**
  A property that accesses the backing layer’s backgroundColor.
*/
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/**
  An initializer that initializes the object with a NSCoder object.
  \param aDecoder A NSCoder instance.

*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  An initializer that initializes the object with a CGRect object.
  If AutoLayout is used, it is better to initilize the instance
  using the init() initializer.
  \param frame A CGRect instance.

*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  A convenience initializer.
*/
- (nonnull instancetype)init;
- (void)layoutSublayersOfLayer:(CALayer * _Nonnull)layer;
- (void)layoutSubviews;
/**
  A delegation method that is executed when the view has began a
  touch event.
  \param touches A set of UITouch objects.

  \param event A UIEvent object.

*/
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/**
  A delegation method that is executed when the view touch event has
  ended.
  \param touches A set of UITouch objects.

  \param event A UIEvent object.

*/
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/**
  A delegation method that is executed when the view touch event has
  been cancelled.
  \param touches A set of UITouch objects.

  \param event A UIEvent object.

*/
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
/**
  Prepares the visualLayer property.
*/
- (void)prepareVisualLayer;
/**
  Manages the layout for the visualLayer property.
*/
- (void)layoutVisualLayer;
@end

@class UICollectionViewLayout;

SWIFT_CLASS("_TtC17HafsaInspectorApp14CollectionView")
@interface CollectionView : UICollectionView
/**
  A preset wrapper around contentInset.
*/
@property (nonatomic) UIEdgeInsets contentEdgeInsetsPreset;
@property (nonatomic) UIEdgeInsets contentInset;
/**
  Scroll direction.
*/
@property (nonatomic) UICollectionViewScrollDirection scrollDirection;
/**
  A preset wrapper around interimSpace.
*/
@property (nonatomic) enum InterimSpacePreset interimSpacePreset;
/**
  Spacing between items.
*/
@property (nonatomic) CGFloat interimSpace;
/**
  An initializer that initializes the object with a NSCoder object.
  \param aDecoder A NSCoder instance.

*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  An initializer that initializes the object.
  \param frame A CGRect defining the view’s frame.

  \param collectionViewLayout A UICollectionViewLayout reference.

*/
- (nonnull instancetype)initWithFrame:(CGRect)frame collectionViewLayout:(UICollectionViewLayout * _Nonnull)layout OBJC_DESIGNATED_INITIALIZER;
/**
  An initializer that initializes the object.
  \param frame A CGRect defining the view’s frame.

*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  A convenience initializer that initializes the object.
*/
- (nonnull instancetype)init;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
@end


SWIFT_CLASS_NAMED("CollectionViewCell")
@interface CollectionViewCell : UICollectionViewCell
/**
  A CAShapeLayer used to manage elements that would be affected by
  the clipToBounds property of the backing layer. For example, this
  allows the dropshadow effect on the backing layer, while clipping
  the image to a desired shape within the visualLayer.
*/
@property (nonatomic, readonly, strong) CAShapeLayer * _Nonnull visualLayer;
/**
  An Array of pulse layers.
*/
@property (nonatomic, readonly, copy) NSArray<CAShapeLayer *> * _Nonnull pulseLayers;
/**
  The opcaity value for the pulse animation.
*/
@property (nonatomic) CGFloat pulseOpacity;
/**
  The color of the pulse effect.
*/
@property (nonatomic, strong) UIColor * _Nonnull pulseColor;
/**
  The type of PulseAnimation.
*/
@property (nonatomic) enum PulseAnimation pulseAnimation;
/**
  A property that manages an image for the visualLayer’s contents
  property. Images should not be set to the backing layer’s contents
  property to avoid conflicts when using clipsToBounds.
*/
@property (nonatomic, strong) UIImage * _Nullable image;
/**
  Allows a relative subrectangle within the range of 0 to 1 to be
  specified for the visualLayer’s contents property. This allows
  much greater flexibility than the contentsGravity property in
  terms of how the image is cropped and stretched.
*/
@property (nonatomic) CGRect contentsRect;
/**
  A CGRect that defines a stretchable region inside the visualLayer
  with a fixed border around the edge.
*/
@property (nonatomic) CGRect contentsCenter;
/**
  A floating point value that defines a ratio between the pixel
  dimensions of the visualLayer’s contents property and the size
  of the view. By default, this value is set to the Device.scale.
*/
@property (nonatomic) CGFloat contentsScale;
/**
  A Preset for the contentsGravity property.
*/
@property (nonatomic) enum MaterialGravity contentsGravityPreset;
/**
  Determines how content should be aligned within the visualLayer’s bounds.
*/
@property (nonatomic, copy) NSString * _Nonnull contentsGravity;
/**
  A preset wrapper around contentInset.
*/
@property (nonatomic) enum EdgeInsetsPreset contentEdgeInsetsPreset;
/**
  A wrapper around grid.contentInset.
*/
@property (nonatomic) UIEdgeInsets contentInset;
/**
  A preset wrapper around interimSpace.
*/
@property (nonatomic) enum InterimSpacePreset interimSpacePreset;
/**
  A wrapper around grid.interimSpace.
*/
@property (nonatomic) CGFloat interimSpace;
/**
  A property that accesses the backing layer’s backgroundColor.
*/
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/**
  An initializer that initializes the object with a NSCoder object.
  \param aDecoder A NSCoder instance.

*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  An initializer that initializes the object with a CGRect object.
  If AutoLayout is used, it is better to initilize the instance
  using the init() initializer.
  \param frame A CGRect instance.

*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  A convenience initializer.
*/
- (nonnull instancetype)init;
- (void)layoutSublayersOfLayer:(CALayer * _Nonnull)layer;
- (void)layoutSubviews;
/**
  A delegation method that is executed when the view has began a
  touch event.
  \param touches A set of UITouch objects.

  \param event A UIEvent object.

*/
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/**
  A delegation method that is executed when the view touch event has
  ended.
  \param touches A set of UITouch objects.

  \param event A UIEvent object.

*/
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/**
  A delegation method that is executed when the view touch event has
  been cancelled.
  \param touches A set of UITouch objects.

  \param event A UIEvent object.

*/
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
/**
  Prepares the visualLayer property.
*/
- (void)prepareVisualLayer;
/**
  Manages the layout for the visualLayer property.
*/
- (void)layoutVisualLayer;
@end

@class NSIndexPath;
@class UICollectionViewLayoutAttributes;

SWIFT_CLASS("_TtC17HafsaInspectorApp20CollectionViewLayout")
@interface CollectionViewLayout : UICollectionViewLayout
/**
  Used to calculate the dimensions of the cells.
*/
@property (nonatomic) CGPoint offset;
/**
  The size of items.
*/
@property (nonatomic) CGSize itemSize;
/**
  A preset wrapper around contentEdgeInsets.
*/
@property (nonatomic) enum EdgeInsetsPreset contentEdgeInsetsPreset;
/**
  A wrapper around grid.contentEdgeInsets.
*/
@property (nonatomic) UIEdgeInsets contentEdgeInsets;
/**
  Size of the content.
*/
@property (nonatomic) CGSize contentSize;
/**
  Scroll direction.
*/
@property (nonatomic) UICollectionViewScrollDirection scrollDirection;
/**
  A preset wrapper around interimSpace.
*/
@property (nonatomic) enum InterimSpacePreset interimSpacePreset;
/**
  Spacing between items.
*/
@property (nonatomic) CGFloat interimSpace;
@property (nonatomic, readonly) CGSize collectionViewContentSize;
/**
  Retrieves the index paths for the items within the passed in CGRect.
  \param rect A CGRect that acts as the bounds to find the items within.


  returns:
  An Array of NSIndexPath objects.
*/
- (NSArray<NSIndexPath *> * _Nonnull)indexPathsOfItemsInRectWithRect:(CGRect)rect;
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect;
- (BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds;
- (void)prepareLayout;
- (CGPoint)targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("ColorPalette")
@protocol ColorPalette
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull lighten5;)
+ (UIColor * _Nonnull)lighten5;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull lighten4;)
+ (UIColor * _Nonnull)lighten4;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull lighten3;)
+ (UIColor * _Nonnull)lighten3;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull lighten2;)
+ (UIColor * _Nonnull)lighten2;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull lighten1;)
+ (UIColor * _Nonnull)lighten1;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull base;)
+ (UIColor * _Nonnull)base;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull darken1;)
+ (UIColor * _Nonnull)darken1;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull darken2;)
+ (UIColor * _Nonnull)darken2;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull darken3;)
+ (UIColor * _Nonnull)darken3;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull darken4;)
+ (UIColor * _Nonnull)darken4;
@optional
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull accent1;)
+ (UIColor * _Nonnull)accent1;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull accent2;)
+ (UIColor * _Nonnull)accent2;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull accent3;)
+ (UIColor * _Nonnull)accent3;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull accent4;)
+ (UIColor * _Nonnull)accent4;
@end

@class RPFloatingPlaceholderTextView;

SWIFT_CLASS("_TtC17HafsaInspectorApp20CommentTableViewCell")
@interface CommentTableViewCell : UITableViewCell
@property (nonatomic, weak) IBOutlet RPFloatingPlaceholderTextView * _Null_unspecified textView;
- (void)configureCommentTableViewCell;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17HafsaInspectorApp11ContentCard")
@interface ContentCard : PulseView
/**
  Will render the view.
*/
@property (nonatomic, readonly) BOOL willLayout;
/**
  A preset wrapper around contentInset.
*/
@property (nonatomic) enum EdgeInsetsPreset contentEdgeInsetsPreset;
/**
  A wrapper around grid.contentInset.
*/
@property (nonatomic) UIEdgeInsets contentEdgeInsets;
/**
  A preset wrapper around interimSpace.
*/
@property (nonatomic) enum InterimSpacePreset interimSpacePreset;
/**
  A wrapper around grid.interimSpace.
*/
@property (nonatomic) CGFloat interimSpace;
/**
  A reference to the titleBar.
*/
@property (nonatomic, strong) Toolbar * _Nullable titleBar;
/**
  A reference to the contentView.
*/
@property (nonatomic, strong) UIView * _Nonnull contentView;
/**
  A reference to the bottomBar.
*/
@property (nonatomic, strong) Bar * _Nullable bottomBar;
/**
  Grid cell factor.
*/
@property (nonatomic) CGFloat gridFactor;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
- (void)layoutSubviews;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ContentViewAlignment, "ContentViewAlignment") {
  ContentViewAlignmentAny = 0,
  ContentViewAlignmentCenter = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, CornerRadiusPreset, "CornerRadiusPreset") {
  CornerRadiusPresetNone = 0,
  CornerRadiusPresetCornerRadius1 = 1,
  CornerRadiusPresetCornerRadius2 = 2,
  CornerRadiusPresetCornerRadius3 = 3,
  CornerRadiusPresetCornerRadius4 = 4,
  CornerRadiusPresetCornerRadius5 = 5,
  CornerRadiusPresetCornerRadius6 = 6,
  CornerRadiusPresetCornerRadius7 = 7,
  CornerRadiusPresetCornerRadius8 = 8,
  CornerRadiusPresetCornerRadius9 = 9,
};

@class UISwitch;

SWIFT_CLASS("_TtC17HafsaInspectorApp24CreateUserViewController")
@interface CreateUserViewController : UIViewController <UITextFieldDelegate>
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified createButton;
@property (nonatomic, weak) IBOutlet UISwitch * _Null_unspecified sanfranAdmin;
@property (nonatomic, weak) IBOutlet UISwitch * _Null_unspecified chicagoAdmin;
@property (nonatomic, weak) IBOutlet UISwitch * _Null_unspecified admin;
@property (nonatomic, weak) IBOutlet HITextField * _Null_unspecified fullname;
@property (nonatomic, weak) IBOutlet HITextField * _Null_unspecified username;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified chicagoLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified sanfranLabel;
+ (CreateUserViewController * _Nonnull)create;
- (void)viewDidLoad;
- (void)switchChanged;
- (IBAction)createButtonPressed:(id _Nonnull)sender;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSError;

SWIFT_CLASS("_TtC17HafsaInspectorApp11CurrentUser")
@interface CurrentUser : NSObject
@property (nonatomic, strong) FIRDatabaseReference * _Null_unspecified ref;
@property (nonatomic, copy) NSString * _Nonnull username;
@property (nonatomic) BOOL adminAccess;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (CurrentUser * _Nonnull)sharedClient;
- (void)signin:(NSString * _Nonnull)user :(void (^ _Nonnull)(CurrentUser * _Nullable, NSError * _Nullable))completion;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, DepthPreset, "DepthPreset") {
  DepthPresetNone = 0,
  DepthPresetDepth1 = 1,
  DepthPresetDepth2 = 2,
  DepthPresetDepth3 = 3,
  DepthPresetDepth4 = 4,
  DepthPresetDepth5 = 5,
};

typedef SWIFT_ENUM_NAMED(NSInteger, DividerAlignment, "DividerAlignment") {
  DividerAlignmentTop = 0,
  DividerAlignmentLeft = 1,
  DividerAlignmentBottom = 2,
  DividerAlignmentRight = 3,
};

@protocol DynamicFontTypeDelegate;

SWIFT_CLASS_NAMED("DynamicFontType")
@interface DynamicFontType : NSObject
/**
  A weak reference to a DynamicFontTypeDelegate.
*/
@property (nonatomic, weak) id <DynamicFontTypeDelegate> _Nullable delegate;
/**
  Initializer.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)handleContentSizeChange;
@end


SWIFT_PROTOCOL_NAMED("DynamicFontTypeDelegate")
@protocol DynamicFontTypeDelegate
/**
  A delegation method that is executed when the dynamic type
  is changed.
  \param dynamicFontType A DynamicFontType.

*/
- (void)dynamicFontTypeWithDynamicFontType:(DynamicFontType * _Nonnull)dynamicFontType;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, EdgeInsetsPreset, "EdgeInsetsPreset") {
  EdgeInsetsPresetNone = 0,
  EdgeInsetsPresetSquare1 = 1,
  EdgeInsetsPresetSquare2 = 2,
  EdgeInsetsPresetSquare3 = 3,
  EdgeInsetsPresetSquare4 = 4,
  EdgeInsetsPresetSquare5 = 5,
  EdgeInsetsPresetSquare6 = 6,
  EdgeInsetsPresetSquare7 = 7,
  EdgeInsetsPresetSquare8 = 8,
  EdgeInsetsPresetSquare9 = 9,
  EdgeInsetsPresetWideRectangle1 = 10,
  EdgeInsetsPresetWideRectangle2 = 11,
  EdgeInsetsPresetWideRectangle3 = 12,
  EdgeInsetsPresetWideRectangle4 = 13,
  EdgeInsetsPresetWideRectangle5 = 14,
  EdgeInsetsPresetWideRectangle6 = 15,
  EdgeInsetsPresetWideRectangle7 = 16,
  EdgeInsetsPresetWideRectangle8 = 17,
  EdgeInsetsPresetWideRectangle9 = 18,
  EdgeInsetsPresetTallRectangle1 = 19,
  EdgeInsetsPresetTallRectangle2 = 20,
  EdgeInsetsPresetTallRectangle3 = 21,
  EdgeInsetsPresetTallRectangle4 = 22,
  EdgeInsetsPresetTallRectangle5 = 23,
  EdgeInsetsPresetTallRectangle6 = 24,
  EdgeInsetsPresetTallRectangle7 = 25,
  EdgeInsetsPresetTallRectangle8 = 26,
  EdgeInsetsPresetTallRectangle9 = 27,
};

@protocol EditedImageDelegate;

SWIFT_CLASS("_TtC17HafsaInspectorApp23EditImageViewController")
@interface EditImageViewController : UIViewController
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified saveButton;
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified deleteButton;
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified imageView;
@property (nonatomic, strong) UIImage * _Nonnull image;
@property (nonatomic) BOOL fromCamera;
@property (nonatomic, strong) id <EditedImageDelegate> _Null_unspecified delegate;
+ (EditImageViewController * _Nonnull)create:(BOOL)fromCamera;
- (void)viewDidLoad;
- (IBAction)saveButtonPressed:(id _Nonnull)sender;
- (IBAction)deleteButtonPressed:(id _Nonnull)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP17HafsaInspectorApp19EditedImageDelegate_")
@protocol EditedImageDelegate
@optional
- (void)didSaveImage:(UIImage * _Nonnull)image;
- (void)didDiscardImage;
- (void)deleteImage:(UIImage * _Nonnull)image;
@end

@class UIFont;
@class IconButton;

SWIFT_CLASS("_TtC17HafsaInspectorApp9TextField")
@interface TextField : UITextField
/**
  Default size when using AutoLayout.
*/
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/**
  A Boolean that indicates if the TextField is in an animating state.
*/
@property (nonatomic) BOOL isAnimating;
/**
  A property that accesses the backing layer’s backgroundColor.
*/
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/**
  Reference to the divider.
*/
@property (nonatomic, readonly, strong) CAShapeLayer * _Null_unspecified divider;
/**
  Divider height.
*/
@property (nonatomic) CGFloat dividerHeight;
/**
  Divider active state height.
*/
@property (nonatomic) CGFloat dividerActiveHeight;
/**
  Sets the divider.
*/
@property (nonatomic, strong) UIColor * _Nonnull dividerColor;
/**
  Sets the divider.
*/
@property (nonatomic, strong) UIColor * _Nullable dividerActiveColor;
/**
  The placeholderLabel font value.
*/
@property (nonatomic, strong) UIFont * _Nullable font;
/**
  TextField’s text property observer.
*/
@property (nonatomic, copy) NSString * _Nullable text;
/**
  The placeholderLabel text value.
*/
@property (nonatomic, copy) NSString * _Nullable placeholder;
/**
  The placeholder UILabel.
*/
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified placeholderLabel;
/**
  Placeholder textColor.
*/
@property (nonatomic, strong) UIColor * _Nonnull placeholderColor;
/**
  Placeholder active textColor.
*/
@property (nonatomic, strong) UIColor * _Nonnull placeholderActiveColor;
/**
  This property adds a padding to placeholder y position animation
*/
@property (nonatomic) CGFloat placeholderVerticalOffset;
/**
  The detailLabel UILabel that is displayed.
*/
@property (nonatomic, readonly, strong) UILabel * _Nonnull detailLabel;
/**
  The detailLabel text value.
*/
@property (nonatomic, copy) NSString * _Nullable detail;
/**
  Detail textColor.
*/
@property (nonatomic, strong) UIColor * _Nonnull detailColor;
/**
  Vertical distance for the detailLabel from the divider.
*/
@property (nonatomic) CGFloat detailVerticalOffset;
/**
  Handles the textAlignment of the placeholderLabel.
*/
@property (nonatomic) NSTextAlignment textAlignment;
/**
  Enables the clearIconButton.
*/
@property (nonatomic) BOOL isClearIconButtonEnable;
/**
  Enables the automatic handling of the clearIconButton.
*/
@property (nonatomic) BOOL clearIconButtonAutoHandle;
/**
  Enables the visibilityIconButton.
*/
@property (nonatomic) BOOL isVisibilityIconButtonEnable;
/**
  Enables the automatic handling of the visibilityIconButton.
*/
@property (nonatomic) BOOL visibilityIconButtonAutoHandle;
/**
  A reference to the clearIconButton.
*/
@property (nonatomic, readonly, strong) IconButton * _Nullable clearIconButton;
/**
  A reference to the visibilityIconButton.
*/
@property (nonatomic, readonly, strong) IconButton * _Nullable visibilityIconButton;
/**
  \code
  layoutIfNeeded
  \endcode is called within \code
  becomeFirstResponder
  \endcode to
  fix an issue that when the TextField calls \code
  becomeFirstResponder
  \endcode
  immediately when launching an instance, the TextField is not
  calculated correctly.
*/
- (BOOL)becomeFirstResponder;
/**
  An initializer that initializes the object with a NSCoder object.
  \param aDecoder A NSCoder instance.

*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  An initializer that initializes the object with a CGRect object.
  If AutoLayout is used, it is better to initilize the instance
  using the init() initializer.
  \param frame A CGRect instance.

*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  A convenience initializer.
*/
- (nonnull instancetype)init;
- (void)layoutSubviews;
- (void)layoutSublayersOfLayer:(CALayer * _Nonnull)layer;
/**
  Handles the text editing did begin state.
*/
- (void)handleEditingDidBegin;
/**
  Handles the text editing did end state.
*/
- (void)handleEditingDidEnd;
/**
  Handles the clearIconButton TouchUpInside event.
*/
- (void)handleClearIconButton;
/**
  Handles the visibilityIconButton TouchUpInside event.
*/
- (void)handleVisibilityIconButton;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
/**
  Ensures that the components are sized correctly.
*/
- (void)layoutToSize;
/**
  Layout the divider.
*/
- (void)layoutDivider;
/**
  Layout the placeholderLabel.
*/
- (void)layoutPlaceholderLabel;
/**
  Layout the detailLabel.
*/
- (void)layoutDetailLabel;
/**
  Layout the clearIconButton.
*/
- (void)layoutClearIconButton;
/**
  Layout the visibilityIconButton.
*/
- (void)layoutVisibilityIconButton;
/**
  The animation for the divider when editing begins.
*/
- (void)dividerEditingDidBeginAnimation;
/**
  The animation for the divider when editing ends.
*/
- (void)dividerEditingDidEndAnimation;
/**
  The animation for the placeholder when editing begins.
*/
- (void)placeholderEditingDidBeginAnimation;
/**
  The animation for the placeholder when editing ends.
*/
- (void)placeholderEditingDidEndAnimation;
@end


SWIFT_CLASS("_TtC17HafsaInspectorApp14ErrorTextField")
@interface ErrorTextField : TextField
/**
  Controls the visibility of detailLabel
*/
@property (nonatomic) BOOL revealError;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17HafsaInspectorApp33EstablishmentPickerViewController")
@interface EstablishmentPickerViewController : UIViewController <UITextFieldDelegate>
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified nextButton;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified establishmentLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified nameLabel;
@property (nonatomic, weak) IBOutlet HITextField * _Null_unspecified establishmentTextField;
+ (EstablishmentPickerViewController * _Nonnull)create;
- (void)viewDidLoad;
- (void)setupView;
- (IBAction)nextButtonPressed:(id _Nonnull)sender;
- (void)settingsButtonPressed;
- (void)didChangeChapter;
- (void)didGetEstablishmentData;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17HafsaInspectorApp9FabButton")
@interface FabButton : Button
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17HafsaInspectorApp10FlatButton")
@interface FlatButton : Button
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

@class UITextView;
@class UITableView;

SWIFT_CLASS("_TtC17HafsaInspectorApp23FormTableViewController")
@interface FormTableViewController : UITableViewController <UITextViewDelegate>
+ (FormTableViewController * _Nonnull)create;
- (void)viewDidLoad;
- (void)backButtonPressed;
- (void)textViewDidEndEditing:(UITextView * _Nonnull)textView;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView estimatedHeightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)generatePDF;
- (nonnull instancetype)initWithStyle:(UITableViewStyle)style OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, GridAxisDirection, "GridAxisDirection") {
  GridAxisDirectionAny = 0,
  GridAxisDirectionHorizontal = 1,
  GridAxisDirectionVertical = 2,
};

@class NSMutableArray;
@class NSDictionary;

SWIFT_CLASS("_TtC17HafsaInspectorApp9HIManager")
@interface HIManager : NSObject
@property (nonatomic, copy) NSString * _Nonnull userName;
@property (nonatomic, copy) NSString * _Nonnull currentChapter;
@property (nonatomic, copy) NSString * _Nonnull currentDate;
@property (nonatomic, copy) NSString * _Nonnull currentEstablishment;
@property (nonatomic, copy) NSString * _Nonnull comments;
@property (nonatomic, strong) NSMutableArray * _Nonnull data;
@property (nonatomic, strong) NSDictionary * _Nonnull chaptersData;
@property (nonatomic, strong) NSMutableArray * _Nonnull chapters;
@property (nonatomic, strong) NSMutableArray * _Nonnull images;
@property (nonatomic, strong) NSMutableArray * _Nonnull supplierValues;
@property (nonatomic, copy) NSString * _Nonnull password;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull chapterArray;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull establishmentArray;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull supplierArray;
+ (HIManager * _Nonnull)sharedClient;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSArray;

SWIFT_CLASS("_TtC17HafsaInspectorApp11HITextField")
@interface HITextField : TextField <UIPickerViewDelegate, UIPickerViewDataSource>
@property (nonatomic, strong) NSArray * _Nonnull data;
@property (nonatomic, readonly, strong) UIPickerView * _Nonnull picker;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)setup;
- (void)setupPicker;
- (void)setupChapterPicker;
- (void)setupEstablishmentPicker;
- (void)donePicker;
- (NSInteger)numberOfComponentsInPickerView:(UIPickerView * _Nonnull)chapterPickerView;
- (NSInteger)pickerView:(UIPickerView * _Nonnull)chapterPickerView numberOfRowsInComponent:(NSInteger)component;
- (NSString * _Nullable)pickerView:(UIPickerView * _Nonnull)chapterPickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component;
- (void)pickerView:(UIPickerView * _Nonnull)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC17HafsaInspectorApp10IconButton")
@interface IconButton : Button
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17HafsaInspectorApp9ImageCard")
@interface ImageCard : PulseView
/**
  :name:	dividerColor
*/
@property (nonatomic, strong) UIColor * _Nullable dividerColor;
/**
  :name:	divider
*/
@property (nonatomic) BOOL divider;
/**
  :name:	dividerInsets
*/
@property (nonatomic) enum EdgeInsetsPreset dividerEdgeInsetsPreset;
/**
  :name:	dividerInset
*/
@property (nonatomic) UIEdgeInsets dividerInset;
/**
  :name:	imageLayer
*/
@property (nonatomic, readonly, strong) CAShapeLayer * _Nullable imageLayer;
/**
  :name:	image
*/
@property (nonatomic, strong) UIImage * _Nullable image;
/**
  :name:	maxImageHeight
*/
@property (nonatomic) CGFloat maxImageHeight;
/**
  :name:	contentsRect
*/
@property (nonatomic) CGRect contentsRect;
/**
  :name:	contentsCenter
*/
@property (nonatomic) CGRect contentsCenter;
/**
  :name:	contentsScale
*/
@property (nonatomic) CGFloat contentsScale;
/**
  Determines how content should be aligned within the visualLayer’s bounds.
*/
@property (nonatomic, copy) NSString * _Nonnull contentsGravity;
/**
  :name:	contentInsets
*/
@property (nonatomic) enum EdgeInsetsPreset contentEdgeInsetsPreset;
/**
  :name:	contentInset
*/
@property (nonatomic) UIEdgeInsets contentInset;
/**
  :name:	titleLabelInsets
*/
@property (nonatomic) enum EdgeInsetsPreset titleLabelEdgeInsetsPreset;
/**
  :name:	titleLabelInset
*/
@property (nonatomic) UIEdgeInsets titleLabelInset;
/**
  :name:	titleLabel
*/
@property (nonatomic, strong) UILabel * _Nullable titleLabel;
/**
  :name:	contentViewInsets
*/
@property (nonatomic) enum EdgeInsetsPreset contentViewEdgeInsetsPreset;
/**
  :name:	contentViewInset
*/
@property (nonatomic) UIEdgeInsets contentViewInset;
/**
  :name:	contentView
*/
@property (nonatomic, strong) UIView * _Nullable contentView;
/**
  :name:	leftButtonsInsets
*/
@property (nonatomic) enum EdgeInsetsPreset leftButtonsEdgeInsetsPreset;
/**
  :name:	leftButtonsInset
*/
@property (nonatomic) UIEdgeInsets leftButtonsInset;
/**
  :name:	leftButtons
*/
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull leftButtons;
/**
  :name:	rightButtonsInsets
*/
@property (nonatomic) enum EdgeInsetsPreset rightButtonsEdgeInsetsPreset;
/**
  :name:	rightButtonsInset
*/
@property (nonatomic) UIEdgeInsets rightButtonsInset;
/**
  :name:	rightButtons
*/
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull rightButtons;
/**
  :name:	init
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :name:	init
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  :name:	init
*/
- (nonnull instancetype)init;
/**
  :name:	init
*/
- (nullable instancetype)initWithImage:(UIImage * _Nullable)image titleLabel:(UILabel * _Nullable)titleLabel contentView:(UIView * _Nullable)contentView leftButtons:(NSArray<UIView *> * _Nullable)leftButtons rightButtons:(NSArray<UIView *> * _Nullable)rightButtons;
/**
  :name:	layoutSublayersOfLayer
*/
- (void)layoutSublayersOfLayer:(CALayer * _Nonnull)layer;
/**
  :name:	reloadView
*/
- (void)reloadView;
/**
  :name:	prepare
*/
- (void)prepare;
/**
  :name:	prepareImageLayer
*/
- (void)prepareImageLayer;
/**
  :name:	prepareDivider
*/
- (void)prepareDividerWithY:(CGFloat)y width:(CGFloat)width;
/**
  :name:	prepareProperties
*/
- (void)preparePropertiesWithImage:(UIImage * _Nullable)image titleLabel:(UILabel * _Nullable)titleLabel contentView:(UIView * _Nullable)contentView leftButtons:(NSArray<UIView *> * _Nullable)leftButtons rightButtons:(NSArray<UIView *> * _Nullable)rightButtons;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ImageFormat, "ImageFormat") {
  ImageFormatPng = 0,
  ImageFormatJpeg = 1,
};


SWIFT_CLASS("_TtC17HafsaInspectorApp18ImageTableViewCell")
@interface ImageTableViewCell : UITableViewCell <UIScrollViewDelegate, UICollectionViewDataSource, EditedImageDelegate, SaveImageDelegate, UICollectionViewDelegate>
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified addImageButton;
@property (nonatomic, weak) IBOutlet UICollectionView * _Null_unspecified collectionView;
@property (nonatomic, strong) NSMutableArray * _Nonnull imagesArr;
- (void)layoutSubviews;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (IBAction)addImageButtonPressed:(id _Nonnull)sender;
- (void)imageSaved:(UIImage * _Null_unspecified)image;
- (void)deleteImage:(UIImage * _Nonnull)image;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, InterimSpacePreset, "InterimSpacePreset") {
  InterimSpacePresetNone = 0,
  InterimSpacePresetInterimSpace1 = 1,
  InterimSpacePresetInterimSpace2 = 2,
  InterimSpacePresetInterimSpace3 = 3,
  InterimSpacePresetInterimSpace4 = 4,
  InterimSpacePresetInterimSpace5 = 5,
  InterimSpacePresetInterimSpace6 = 6,
  InterimSpacePresetInterimSpace7 = 7,
  InterimSpacePresetInterimSpace8 = 8,
  InterimSpacePresetInterimSpace9 = 9,
};

@class MaterialTextLayer;

SWIFT_CLASS("_TtC17HafsaInspectorApp5Label")
@interface Label : UILabel
/**
  :name:	layerClass
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass;
/**
  :name:	textLayer
*/
@property (nonatomic, readonly, strong) MaterialTextLayer * _Nonnull textLayer;
/**
  :name:	text
*/
@property (nonatomic, copy) NSString * _Nullable text;
/**
  :name:	textColor
*/
@property (nonatomic, strong) UIColor * _Nullable textColor;
/**
  :name:	font
*/
@property (nonatomic, strong) UIFont * _Null_unspecified font;
/**
  :name:	textAlignment
*/
@property (nonatomic) NSTextAlignment textAlignment;
/**
  :name:	wrapped
*/
@property (nonatomic) BOOL wrapped;
/**
  :name:	contentsScale
*/
@property (nonatomic) CGFloat contentsScale;
/**
  :name:	lineBreakMode
*/
@property (nonatomic) NSLineBreakMode lineBreakMode;
/**
  :name:	init
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :name:	init
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  :name:	init
*/
- (nonnull instancetype)init;
/**
  :name:	stringSize
*/
- (CGSize)stringSizeWithConstrainedToWidth:(double)width;
/**
  :name:	prepare
*/
- (void)prepare;
@end


SWIFT_CLASS_NAMED("Layer")
@interface Layer : CAShapeLayer
/**
  A CAShapeLayer used to manage elements that would be affected by
  the clipToBounds property of the backing layer. For example, this
  allows the dropshadow effect on the backing layer, while clipping
  the image to a desired shape within the visualLayer.
*/
@property (nonatomic, readonly, strong) CAShapeLayer * _Nonnull visualLayer;
/**
  A property that manages an image for the visualLayer’s contents
  property. Images should not be set to the backing layer’s contents
  property to avoid conflicts when using clipsToBounds.
*/
@property (nonatomic, strong) UIImage * _Nullable image;
/**
  Allows a relative subrectangle within the range of 0 to 1 to be
  specified for the visualLayer’s contents property. This allows
  much greater flexibility than the contentsGravity property in
  terms of how the image is cropped and stretched.
*/
@property (nonatomic) CGRect contentsRect;
/**
  A CGRect that defines a stretchable region inside the visualLayer
  with a fixed border around the edge.
*/
@property (nonatomic) CGRect contentsCenter;
/**
  A floating point value that defines a ratio between the pixel
  dimensions of the visualLayer’s contents property and the size
  of the layer. By default, this value is set to the Device.scale.
*/
@property (nonatomic) CGFloat contentsScale;
/**
  A Preset for the contentsGravity property.
*/
@property (nonatomic) enum MaterialGravity contentsGravityPreset;
/**
  Determines how content should be aligned within the visualLayer’s bounds.
*/
@property (nonatomic, copy) NSString * _Nonnull contentsGravity;
/**
  A property that sets the cornerRadius of the backing layer. If the shape
  property has a value of .circle when the cornerRadius is set, it will
  become .none, as it no longer maintains its circle shape.
*/
@property (nonatomic) CGFloat cornerRadius;
/**
  An initializer that initializes the object with a NSCoder object.
  \param aDecoder A NSCoder instance.

*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  An initializer the same as init(). The layer parameter is ignored
  to avoid crashes on certain architectures.
  \param layer Any.

*/
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
/**
  A convenience initializer.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  An initializer that initializes the object with a CGRect object.
  \param frame A CGRect instance.

*/
- (nonnull instancetype)initWithFrame:(CGRect)frame;
- (void)layoutSublayers;
/**
  Prepares the visualLayer property.
*/
- (void)prepareVisualLayer;
/**
  Manages the layout for the visualLayer property.
*/
- (void)layoutVisualLayer;
@end


SWIFT_CLASS("_TtC17HafsaInspectorApp19LoginViewController")
@interface LoginViewController : UIViewController <UITextFieldDelegate>
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified loginButton;
@property (nonatomic, weak) IBOutlet HITextField * _Null_unspecified password;
@property (nonatomic, weak) IBOutlet HITextField * _Null_unspecified username;
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (IBAction)loginButtonPressed:(id _Nonnull)sender;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MaterialGravity, "MaterialGravity") {
  MaterialGravityCenter = 0,
  MaterialGravityTop = 1,
  MaterialGravityBottom = 2,
  MaterialGravityLeft = 3,
  MaterialGravityRight = 4,
  MaterialGravityTopLeft = 5,
  MaterialGravityTopRight = 6,
  MaterialGravityBottomLeft = 7,
  MaterialGravityBottomRight = 8,
  MaterialGravityResize = 9,
  MaterialGravityResizeAspect = 10,
  MaterialGravityResizeAspectFill = 11,
};


SWIFT_CLASS("_TtC17HafsaInspectorApp17MaterialTextLayer")
@interface MaterialTextLayer : CATextLayer
/**
  :name:	fontType
*/
@property (nonatomic, strong) UIFont * _Nullable fontType;
/**
  :name:	text
*/
@property (nonatomic, copy) NSString * _Nullable text;
/**
  :name:	pointSize
*/
@property (nonatomic) CGFloat pointSize;
/**
  :name:	textColor
*/
@property (nonatomic, strong) UIColor * _Nullable textColor;
/**
  :name:	textAlignment
*/
@property (nonatomic) NSTextAlignment textAlignment;
/**
  :name:	lineBreakMode
*/
@property (nonatomic) NSLineBreakMode lineBreakMode;
/**
  :name: init
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :name: init
*/
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
/**
  :name: init
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  :name: init
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame;
/**
  :name:	stringSize
*/
- (CGSize)stringSizeWithConstrainedToWidth:(double)width;
/**
  :name:	prepareLayer
*/
- (void)prepareLayer;
@end

enum MenuDirection : NSInteger;
@protocol MenuDelegate;

SWIFT_CLASS("_TtC17HafsaInspectorApp4Menu")
@interface Menu : View
/**
  A Boolean that indicates if the menu is open or not.
*/
@property (nonatomic) BOOL isOpened;
/**
  Enables the animations for the Menu.
*/
@property (nonatomic) BOOL isEnabled;
/**
  A preset wrapper around interimSpace.
*/
@property (nonatomic) enum InterimSpacePreset interimSpacePreset;
/**
  The space between views.
*/
@property (nonatomic) CGFloat interimSpace;
/**
  The direction in which the animation opens the menu.
*/
@property (nonatomic) enum MenuDirection direction;
/**
  A delegation reference.
*/
@property (nonatomic, weak) id <MenuDelegate> _Nullable delegate;
/**
  An Array of UIViews.
*/
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull views;
/**
  An Optional base view size.
*/
@property (nonatomic) CGSize baseSize;
/**
  Size of views, not including the first view.
*/
@property (nonatomic) CGSize itemSize;
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
/**
  Reload the view layout.
*/
- (void)reload;
/**
  Open the Menu component with animation options.
  \param duration The time for each view’s animation.

  \param delay A delay time for each view’s animation.

  \param usingSpringWithDamping A damping ratio for the animation.

  \param initialSpringVelocity The initial velocity for the animation.

  \param options Options to pass to the animation.

  \param animations An animation block to execute on each view’s animation.

  \param completion A completion block to execute on each view’s animation.

*/
- (void)openWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay usingSpringWithDamping:(CGFloat)usingSpringWithDamping initialSpringVelocity:(CGFloat)initialSpringVelocity options:(UIViewAnimationOptions)options animations:(void (^ _Nullable)(UIView * _Nonnull))animations completion:(void (^ _Nullable)(UIView * _Nonnull))completion;
/**
  Close the Menu component with animation options.
  \param duration The time for each view’s animation.

  \param delay A delay time for each view’s animation.

  \param usingSpringWithDamping A damping ratio for the animation.

  \param initialSpringVelocity The initial velocity for the animation.

  \param options Options to pass to the animation.

  \param animations An animation block to execute on each view’s animation.

  \param completion A completion block to execute on each view’s animation.

*/
- (void)closeWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay usingSpringWithDamping:(CGFloat)usingSpringWithDamping initialSpringVelocity:(CGFloat)initialSpringVelocity options:(UIViewAnimationOptions)options animations:(void (^ _Nullable)(UIView * _Nonnull))animations completion:(void (^ _Nullable)(UIView * _Nonnull))completion;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17HafsaInspectorApp14RootController")
@interface RootController : UIViewController
/**
  Device status bar style.
*/
@property (nonatomic) UIStatusBarStyle statusBarStyle;
/**
  A Boolean property used to enable and disable interactivity
  with the rootViewController.
*/
@property (nonatomic) BOOL isUserInteractionEnabled;
/**
  A UIViewController property that references the active
  main UIViewController. To swap the rootViewController, it
  is recommended to use the transitionFromRootViewController
  helper method.
*/
@property (nonatomic, strong) UIViewController * _Null_unspecified rootViewController;
/**
  An initializer that initializes the object with a NSCoder object.
  \param aDecoder A NSCoder instance.

*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  An initializer that initializes the object with an Optional nib and bundle.
  \param nibNameOrNil An Optional String for the nib.

  \param bundle An Optional NSBundle where the nib is located.

*/
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
/**
  An initializer for the BarController.
  \param rootViewController The main UIViewController.

*/
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (void)viewWillLayoutSubviews;
/**
  A method to swap rootViewController objects.
  \param toViewController The UIViewController to swap
  with the active rootViewController.

  \param duration A TimeInterval that sets the
  animation duration of the transition.

  \param options UIViewAnimationOptions thst are used
  when animating the transition from the active rootViewController
  to the toViewController.

  \param animations An animation block that is executed during
  the transition from the active rootViewController
  to the toViewController.

  \param completion A completion block that is execited after
  the transition animation from the active rootViewController
  to the toViewController has completed.

*/
- (void)transitionTo:(UIViewController * _Nonnull)viewController duration:(NSTimeInterval)duration options:(UIViewAnimationOptions)options animations:(void (^ _Nullable)(void))animations completion:(void (^ _Nullable)(BOOL))completion;
/**
  To execute in the order of the layout chain, override this
  method. \code
  layoutSubviews
  \endcode should be called immediately, unless you
  have a certain need.
*/
- (void)layoutSubviews;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
/**
  A method that prepares the rootViewController.
*/
- (void)prepareRootViewController;
/**
  A method that adds the passed in controller as a child of
  the BarController within the passed in
  container view.
  \param viewController A UIViewController to add as a child.

  \param withContainer container A UIView that is the parent of the
  passed in controller view within the view hierarchy.

*/
- (void)prepareWithViewController:(UIViewController * _Nullable)viewController withContainer:(UIView * _Nonnull)container;
@end


SWIFT_CLASS("_TtC17HafsaInspectorApp14MenuController")
@interface MenuController : RootController
/**
  Reference to the MenuView.
*/
@property (nonatomic, readonly, strong) Menu * _Nonnull menu;
/**
  Opens the menu with a callback.
  \param completion An Optional callback that is executed when
  all menu items have been opened.

*/
- (void)openMenuWithCompletion:(void (^ _Nullable)(UIView * _Nonnull))completion;
/**
  Opens the menu with a callback.
  \param completion An Optional callback that is executed when
  all menu items have been closed.

*/
- (void)closeMenuWithCompletion:(void (^ _Nullable)(UIView * _Nonnull))completion;
/**
  To execute in the order of the layout chain, override this
  method. LayoutSubviews should be called immediately, unless you
  have a certain need.
*/
- (void)layoutSubviews;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("MenuDelegate")
@protocol MenuDelegate
@optional
/**
  Gets called when the user taps while the menu is opened.
  \param menu A Menu.

  \param tappedAt point A CGPoint.

  \param isOutside A boolean indicating whether the tap
  was outside the menu button area.

*/
- (void)menuWithMenu:(Menu * _Nonnull)menu tappedAt:(CGPoint)point isOutside:(BOOL)isOutside;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MenuDirection, "MenuDirection") {
  MenuDirectionUp = 0,
  MenuDirectionDown = 1,
  MenuDirectionLeft = 2,
  MenuDirectionRight = 3,
};


SWIFT_CLASS("_TtC17HafsaInspectorApp8MenuItem")
@interface MenuItem : View
/**
  A reference to the titleLabel.
*/
@property (nonatomic, readonly, strong) UILabel * _Nonnull titleLabel;
/**
  A reference to the button.
*/
@property (nonatomic, readonly, strong) FabButton * _Nonnull button;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
/**
  A reference to the titleLabel text.
*/
@property (nonatomic, copy) NSString * _Nullable title;
/**
  Shows the titleLabel.
*/
- (void)showTitleLabel;
/**
  Hides the titleLabel.
*/
- (void)hideTitleLabel;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17HafsaInspectorApp17NameTableViewCell")
@interface NameTableViewCell : UITableViewCell
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified nameLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified chapterLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified establishmentLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified datelabel;
- (void)configureNameCell;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

enum NavigationBarStyle : NSInteger;
@class UINavigationItem;

SWIFT_CLASS("_TtC17HafsaInspectorApp13NavigationBar")
@interface NavigationBar : UINavigationBar
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/**
  NavigationBarStyle value.
*/
@property (nonatomic) enum NavigationBarStyle navigationBarStyle;
@property (nonatomic) BOOL animating;
/**
  Will render the view.
*/
@property (nonatomic, readonly) BOOL willLayout;
/**
  A preset wrapper around contentInset.
*/
@property (nonatomic) enum EdgeInsetsPreset contentEdgeInsetsPreset;
/**
  A wrapper around grid.contentInset.
*/
@property (nonatomic) UIEdgeInsets contentEdgeInsets;
/**
  A preset wrapper around interimSpace.
*/
@property (nonatomic) enum InterimSpacePreset interimSpacePreset;
/**
  A wrapper around grid.interimSpace.
*/
@property (nonatomic) CGFloat interimSpace;
/**
  Grid cell factor.
*/
@property (nonatomic) CGFloat gridFactor;
/**
  The back button image writes to the backIndicatorImage property and
  backIndicatorTransitionMaskImage property.
*/
@property (nonatomic, strong) UIImage * _Nullable backButtonImage;
/**
  A property that accesses the backing layer’s backgroundColor.
*/
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/**
  An initializer that initializes the object with a NSCoder object.
  \param aDecoder A NSCoder instance.

*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  An initializer that initializes the object with a CGRect object.
  If AutoLayout is used, it is better to initilize the instance
  using the init() initializer.
  \param frame A CGRect instance.

*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  A convenience initializer.
*/
- (nonnull instancetype)init;
- (CGSize)sizeThatFits:(CGSize)size;
- (void)layoutSublayersOfLayer:(CALayer * _Nonnull)layer;
- (void)layoutSubviews;
- (void)pushNavigationItem:(UINavigationItem * _Nonnull)item animated:(BOOL)animated;
/**
  Lays out the UINavigationItem.
  \param item A UINavigationItem to layout.

*/
- (void)layoutNavigationItemWithItem:(UINavigationItem * _Nonnull)item;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
@end

/**
  NavigationBar styles.
*/
typedef SWIFT_ENUM_NAMED(NSInteger, NavigationBarStyle, "NavigationBarStyle") {
  NavigationBarStyleSmall = 0,
  NavigationBarStyleMedium = 1,
  NavigationBarStyleLarge = 2,
};


SWIFT_CLASS("_TtC17HafsaInspectorApp20NavigationController")
@interface NavigationController : UINavigationController
/**
  An initializer that initializes the object with a NSCoder object.
  \param aDecoder A NSCoder instance.

*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  An initializer that initializes the object with an Optional nib and bundle.
  \param nibNameOrNil An Optional String for the nib.

  \param bundle An Optional NSBundle where the nib is located.

*/
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
/**
  An initializer that initializes the object with a rootViewController.
  \param rootViewController A UIViewController for the rootViewController.

*/
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass SWIFT_UNAVAILABLE;
@end

@class UIGestureRecognizer;

@interface NavigationController (SWIFT_EXTENSION(HafsaInspectorApp)) <UIGestureRecognizerDelegate>
/**
  Detects the gesture recognizer being used. This is necessary when using
  NavigationDrawerController. It eliminates the conflict in panning.
  \param gestureRecognizer A UIGestureRecognizer to detect.

  \param touch The UITouch event.


  returns:
  A Boolean of whether to continue the gesture or not, true yes, false no.
*/
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch;
@end


@interface NavigationController (SWIFT_EXTENSION(HafsaInspectorApp)) <UINavigationBarDelegate, UIBarPositioningDelegate>
/**
  Delegation method that is called when a new UINavigationItem is about to be pushed.
  This is used to prepare the transitions between UIViewControllers on the stack.
  \param navigationBar A UINavigationBar that is used in the NavigationController.

  \param item The UINavigationItem that will be pushed on the stack.


  returns:
  A Boolean value that indicates whether to push the item on to the stack or not.
  True is yes, false is no.
*/
- (BOOL)navigationBar:(UINavigationBar * _Nonnull)navigationBar shouldPushItem:(UINavigationItem * _Nonnull)item;
/**
  Handler for the back button.
*/
- (void)handleBackButton;
@end

@class UIPanGestureRecognizer;
@protocol UIViewControllerTransitionCoordinator;
@protocol NavigationDrawerControllerDelegate;

SWIFT_CLASS_NAMED("NavigationDrawerController")
@interface NavigationDrawerController : RootController <UIGestureRecognizerDelegate>
/**
  A UIPanGestureRecognizer property internally used for the
  leftView pan gesture.
*/
@property (nonatomic, readonly, strong) UIPanGestureRecognizer * _Nullable leftPanGesture;
/**
  A UITapGestureRecognizer property internally used for the
  leftView tap gesture.
*/
@property (nonatomic, readonly, strong) UITapGestureRecognizer * _Nullable leftTapGesture;
/**
  A UIPanGestureRecognizer property internally used for the
  rightView pan gesture.
*/
@property (nonatomic, readonly, strong) UIPanGestureRecognizer * _Nullable rightPanGesture;
/**
  A UITapGestureRecognizer property internally used for the
  rightView tap gesture.
*/
@property (nonatomic, readonly, strong) UITapGestureRecognizer * _Nullable rightTapGesture;
/**
  A CGFloat property that accesses the leftView threshold of
  the NavigationDrawerController. When the panning gesture has
  ended, if the position is beyond the threshold,
  the leftView is opened, if it is below the threshold, the
  leftView is closed. The leftViewThreshold is always at half
  the width of the leftView.
*/
@property (nonatomic) CGFloat leftThreshold;
/**
  A CGFloat property that accesses the rightView threshold of
  the NavigationDrawerController. When the panning gesture has
  ended, if the position is beyond the threshold,
  the rightView is closed, if it is below the threshold, the
  rightView is opened. The rightViewThreshold is always at half
  the width of the rightView.
*/
@property (nonatomic) CGFloat rightThreshold;
/**
  A NavigationDrawerControllerDelegate property used to bind
  the delegation object.
*/
@property (nonatomic, weak) id <NavigationDrawerControllerDelegate> _Nullable delegate;
/**
  A CGFloat property that sets the animation duration of the
  leftView when closing and opening. Defaults to 0.25.
*/
@property (nonatomic) NSTimeInterval animationDuration;
/**
  A Boolean property that enables and disables the leftView from
  opening and closing. Defaults to true.
*/
@property (nonatomic) BOOL isEnabled;
/**
  A Boolean property that enables and disables the leftView from
  opening and closing. Defaults to true.
*/
@property (nonatomic) BOOL isLeftViewEnabled;
/**
  Enables the left pan gesture.
*/
@property (nonatomic) BOOL isLeftPanGestureEnabled;
/**
  Enables the left tap gesture.
*/
@property (nonatomic) BOOL isLeftTapGestureEnabled;
/**
  A Boolean property that enables and disables the rightView from
  opening and closing. Defaults to true.
*/
@property (nonatomic) BOOL isRightViewEnabled;
/**
  Enables the right pan gesture.
*/
@property (nonatomic) BOOL isRightPanGestureEnabled;
/**
  Enables the right tap gesture.
*/
@property (nonatomic) BOOL isRightTapGestureEnabled;
/**
  A Boolean property that triggers the status bar to be isHidden
  when the leftView is opened. Defaults to true.
*/
@property (nonatomic) BOOL isHiddenStatusBarEnabled;
/**
  Sets the statusBar to isHidden or not.
*/
@property (nonatomic) BOOL isStatusBarHidden;
/**
  A DepthPreset property that is used to set the depth of the
  leftView when opened.
*/
@property (nonatomic) enum DepthPreset depthPreset;
/**
  A View property that is used to hide and reveal the
  leftViewController. It is very rare that this property will
  need to be accessed externally.
*/
@property (nonatomic, readonly, strong) View * _Nullable leftView;
/**
  A View property that is used to hide and reveal the
  rightViewController. It is very rare that this property will
  need to be accessed externally.
*/
@property (nonatomic, readonly, strong) View * _Nullable rightView;
/**
  Indicates whether the leftView or rightView is opened.
*/
@property (nonatomic, readonly) BOOL isOpened;
/**
  indicates if the leftView is opened.
*/
@property (nonatomic, readonly) BOOL isLeftViewOpened;
/**
  Indicates if the rightView is opened.
*/
@property (nonatomic, readonly) BOOL isRightViewOpened;
/**
  Content view controller to encompase the entire component. This is
  primarily used when the StatusBar is being isHidden. The alpha value of
  the rootViewController decreases, and shows the StatusBar. To avoid
  this, and to add a isHidden transition viewController for complex
  situations, the contentViewController was added.
*/
@property (nonatomic, readonly, strong) UIViewController * _Nonnull contentViewController;
/**
  A UIViewController property that references the
  active left UIViewController.
*/
@property (nonatomic, readonly, strong) UIViewController * _Nullable leftViewController;
/**
  A UIViewController property that references the
  active right UIViewController.
*/
@property (nonatomic, readonly, strong) UIViewController * _Nullable rightViewController;
/**
  An initializer that initializes the object with a NSCoder object.
  \param aDecoder A NSCoder instance.

*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  An initializer that initializes the object with an Optional nib and bundle.
  \param nibNameOrNil An Optional String for the nib.

  \param bundle An Optional NSBundle where the nib is located.

*/
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
/**
  An initializer for the NavigationDrawerController.
  \param rootViewController The main UIViewController.

  \param leftViewController An Optional left UIViewController.

  \param rightViewController An Optional right UIViewController.

*/
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController leftViewController:(UIViewController * _Nullable)leftViewController rightViewController:(UIViewController * _Nullable)rightViewController OBJC_DESIGNATED_INITIALIZER;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
/**
  Layout subviews.
*/
- (void)layoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
/**
  A method that is used to set the width of the leftView when
  opened. This is the recommended method of setting the leftView
  width.
  \param width A CGFloat value to set as the new width.

  \param isHidden A Boolean value of whether the leftView
  should be isHidden after the width has been updated or not.

  \param animated A Boolean value that indicates to animate
  the leftView width change.

*/
- (void)setLeftViewWidthWithWidth:(CGFloat)width isHidden:(BOOL)isHidden animated:(BOOL)animated duration:(NSTimeInterval)duration;
/**
  A method that is used to set the width of the rightView when
  opened. This is the recommended method of setting the rightView
  width.
  \param width A CGFloat value to set as the new width.

  \param isHidden A Boolean value of whether the rightView
  should be isHidden after the width has been updated or not.

  \param animated A Boolean value that indicates to animate
  the rightView width change.

*/
- (void)setRightViewWidthWithWidth:(CGFloat)width isHidden:(BOOL)isHidden animated:(BOOL)animated duration:(NSTimeInterval)duration;
/**
  A method that toggles the leftView opened if previously closed,
  or closed if previously opened.
  \param velocity A CGFloat value that sets the
  velocity of the user interaction when animating the
  leftView. Defaults to 0.

*/
- (void)toggleLeftViewWithVelocity:(CGFloat)velocity;
/**
  A method that toggles the rightView opened if previously closed,
  or closed if previously opened.
  \param velocity A CGFloat value that sets the
  velocity of the user interaction when animating the
  leftView. Defaults to 0.

*/
- (void)toggleRightViewWithVelocity:(CGFloat)velocity;
/**
  A method that opens the leftView.
  \param velocity A CGFloat value that sets the
  velocity of the user interaction when animating the
  leftView. Defaults to 0.

*/
- (void)openLeftViewWithVelocity:(CGFloat)velocity;
/**
  A method that opens the rightView.
  \param velocity A CGFloat value that sets the
  velocity of the user interaction when animating the
  leftView. Defaults to 0.

*/
- (void)openRightViewWithVelocity:(CGFloat)velocity;
/**
  A method that closes the leftView.
  \param velocity A CGFloat value that sets the
  velocity of the user interaction when animating the
  leftView. Defaults to 0.

*/
- (void)closeLeftViewWithVelocity:(CGFloat)velocity;
/**
  A method that closes the rightView.
  \param velocity A CGFloat value that sets the
  velocity of the user interaction when animating the
  leftView. Defaults to 0.

*/
- (void)closeRightViewWithVelocity:(CGFloat)velocity;
/**
  Detects the gesture recognizer being used.
  \param gestureRecognizer A UIGestureRecognizer to detect.

  \param touch The UITouch event.


  returns:
  A Boolean of whether to continue the gesture or not.
*/
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch;
/**
  A method that is fired when the pan gesture is recognized
  for the leftView.
  \param recognizer A UIPanGestureRecognizer that is
  passed to the handler when recognized.

*/
- (void)handleLeftViewPanGestureWithRecognizer:(UIPanGestureRecognizer * _Nonnull)recognizer;
/**
  A method that is fired when the pan gesture is recognized
  for the rightView.
  \param recognizer A UIPanGestureRecognizer that is
  passed to the handler when recognized.

*/
- (void)handleRightViewPanGestureWithRecognizer:(UIPanGestureRecognizer * _Nonnull)recognizer;
/**
  A method that is fired when the tap gesture is recognized
  for the leftView.
  \param recognizer A UITapGestureRecognizer that is
  passed to the handler when recognized.

*/
- (void)handleLeftViewTapGestureWithRecognizer:(UITapGestureRecognizer * _Nonnull)recognizer;
/**
  A method that is fired when the tap gesture is recognized
  for the rightView.
  \param recognizer A UITapGestureRecognizer that is
  passed to the handler when recognized.

*/
- (void)handleRightViewTapGestureWithRecognizer:(UITapGestureRecognizer * _Nonnull)recognizer;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController SWIFT_UNAVAILABLE;
@end

enum NavigationDrawerPosition : NSInteger;

SWIFT_PROTOCOL_NAMED("NavigationDrawerControllerDelegate")
@protocol NavigationDrawerControllerDelegate
@optional
/**
  An optional delegation method that is fired before the
  NavigationDrawerController opens.
  \param navigationDrawerController A NavigationDrawerController.

  \param position The NavigationDrawerPosition.

*/
- (void)navigationDrawerControllerWithNavigationDrawerController:(NavigationDrawerController * _Nonnull)navigationDrawerController willOpen:(enum NavigationDrawerPosition)position;
/**
  An optional delegation method that is fired after the
  NavigationDrawerController opened.
  \param navigationDrawerController A NavigationDrawerController.

  \param position The NavigationDrawerPosition.

*/
- (void)navigationDrawerControllerWithNavigationDrawerController:(NavigationDrawerController * _Nonnull)navigationDrawerController didOpen:(enum NavigationDrawerPosition)position;
/**
  An optional delegation method that is fired before the
  NavigationDrawerController closes.
  \param navigationDrawerController A NavigationDrawerController.

  \param position The NavigationDrawerPosition.

*/
- (void)navigationDrawerControllerWithNavigationDrawerController:(NavigationDrawerController * _Nonnull)navigationDrawerController willClose:(enum NavigationDrawerPosition)position;
/**
  An optional delegation method that is fired after the
  NavigationDrawerController closed.
  \param navigationDrawerController A NavigationDrawerController.

  \param position The NavigationDrawerPosition.

*/
- (void)navigationDrawerControllerWithNavigationDrawerController:(NavigationDrawerController * _Nonnull)navigationDrawerController didClose:(enum NavigationDrawerPosition)position;
/**
  An optional delegation method that is fired when the
  NavigationDrawerController pan gesture begins.
  \param navigationDrawerController A NavigationDrawerController.

  \param didBeginPanAt point A CGPoint.

  \param position The NavigationDrawerPosition.

*/
- (void)navigationDrawerControllerWithNavigationDrawerController:(NavigationDrawerController * _Nonnull)navigationDrawerController didBeginPanAt:(CGPoint)point position:(enum NavigationDrawerPosition)position;
/**
  An optional delegation method that is fired when the
  NavigationDrawerController pan gesture changes position.
  \param navigationDrawerController A NavigationDrawerController.

  \param didChangePanAt point A CGPoint.

  \param position The NavigationDrawerPosition.

*/
- (void)navigationDrawerControllerWithNavigationDrawerController:(NavigationDrawerController * _Nonnull)navigationDrawerController didChangePanAt:(CGPoint)point position:(enum NavigationDrawerPosition)position;
/**
  An optional delegation method that is fired when the
  NavigationDrawerController pan gesture ends.
  \param navigationDrawerController A NavigationDrawerController.

  \param didEndPanAt point A CGPoint.

  \param position The NavigationDrawerPosition.

*/
- (void)navigationDrawerControllerWithNavigationDrawerController:(NavigationDrawerController * _Nonnull)navigationDrawerController didEndPanAt:(CGPoint)point position:(enum NavigationDrawerPosition)position;
/**
  An optional delegation method that is fired when the
  NavigationDrawerController tap gesture executes.
  \param navigationDrawerController A NavigationDrawerController.

  \param didTapAt point A CGPoint.

  \param position The NavigationDrawerPosition.

*/
- (void)navigationDrawerControllerWithNavigationDrawerController:(NavigationDrawerController * _Nonnull)navigationDrawerController didTapAt:(CGPoint)point position:(enum NavigationDrawerPosition)position;
/**
  An optional delegation method that is fired when the
  status bar is about to change display, isHidden or not.
  \param navigationDrawerController A NavigationDrawerController.

  \param statusBar isHidden A boolean.

*/
- (void)navigationDrawerControllerWithNavigationDrawerController:(NavigationDrawerController * _Nonnull)navigationDrawerController statusBar:(BOOL)isHidden;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, NavigationDrawerPosition, "NavigationDrawerPosition") {
  NavigationDrawerPositionLeft = 0,
  NavigationDrawerPositionRight = 1,
};


SWIFT_CLASS("_TtC17HafsaInspectorApp14NavigationItem")
@interface NavigationItem : NSObject
/**
  Should center the contentView.
*/
@property (nonatomic) enum ContentViewAlignment contentViewAlignment;
/**
  Back Button.
*/
@property (nonatomic, readonly, strong) IconButton * _Nonnull backButton;
/**
  Content View.
*/
@property (nonatomic, readonly, strong) UIView * _Nonnull contentView;
/**
  Title label.
*/
@property (nonatomic, readonly, strong) UILabel * _Nonnull titleLabel;
/**
  Detail label.
*/
@property (nonatomic, readonly, strong) UILabel * _Nonnull detailLabel;
/**
  Left items.
*/
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull leftViews;
/**
  Right items.
*/
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull rightViews;
@property (nonatomic, readonly, strong) NavigationBar * _Nullable navigationBar;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
/**
  Initializer.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Reloads the subviews for the NavigationBar.
*/
- (void)reload;
@end

enum TabBarLineAlignment : NSInteger;
@protocol TabBarDelegate;

SWIFT_CLASS("_TtC17HafsaInspectorApp6TabBar")
@interface TabBar : Bar
/**
  A boolean indicating if the TabBar line is in an animation state.
*/
@property (nonatomic) BOOL isAnimating;
/**
  A delegation reference.
*/
@property (nonatomic, weak) id <TabBarDelegate> _Nullable delegate;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/**
  The currently selected button.
*/
@property (nonatomic, strong) UIButton * _Nullable selected;
/**
  Buttons.
*/
@property (nonatomic, copy) NSArray<UIButton *> * _Nonnull buttons;
/**
  A boolean to animate the line when touched.
*/
@property (nonatomic) BOOL isLineAnimated;
/**
  A reference to the line UIView.
*/
@property (nonatomic, strong) UIView * _Null_unspecified line;
/**
  The line color.
*/
@property (nonatomic, strong) UIColor * _Nullable lineColor;
/**
  A value for the line alignment.
*/
@property (nonatomic) enum TabBarLineAlignment lineAlignment;
/**
  The line height.
*/
@property (nonatomic) CGFloat lineHeight;
- (void)layoutSubviews;
/**
  Handles the button touch event.
*/
- (void)handleButtonWithButton:(UIButton * _Nonnull)button;
/**
  Selects a given index from the buttons array.
  <ul>
    <li>
      Paramater completion: An optional completion block.
    </li>
  </ul>
  \param at index An Int.

*/
- (void)selectAt:(NSInteger)index completion:(void (^ _Nullable)(UIButton * _Nonnull))completion;
/**
  Animates to a given button.
  <ul>
    <li>
      Paramater completion: An optional completion block.
    </li>
  </ul>
  \param to button A UIButton.

*/
- (void)animateTo:(UIButton * _Nonnull)button completion:(void (^ _Nullable)(UIButton * _Nonnull))completion;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLeftViews:(NSArray<UIView *> * _Nullable)leftViews rightViews:(NSArray<UIView *> * _Nullable)rightViews OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17HafsaInspectorApp10PageTabBar")
@interface PageTabBar : TabBar
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLeftViews:(NSArray<UIView *> * _Nullable)leftViews rightViews:(NSArray<UIView *> * _Nullable)rightViews OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, PageTabBarAlignment, "PageTabBarAlignment") {
  PageTabBarAlignmentTop = 0,
  PageTabBarAlignmentBottom = 1,
};

@class UIPageViewController;
@protocol PageTabBarControllerDelegate;

SWIFT_CLASS_NAMED("PageTabBarController")
@interface PageTabBarController : RootController
/**
  Reference to the PageTabBar.
*/
@property (nonatomic, readonly, strong) PageTabBar * _Nonnull pageTabBar;
/**
  Indicates that the tab has been pressed and animating.
*/
@property (nonatomic) BOOL isTabSelectedAnimation;
/**
  The currently selected UIViewController.
*/
@property (nonatomic) NSInteger selectedIndex;
/**
  PageTabBar alignment setting.
*/
@property (nonatomic) enum PageTabBarAlignment pageTabBarAlignment;
/**
  Delegation handler.
*/
@property (nonatomic, weak) id <PageTabBarControllerDelegate> _Nullable delegate;
/**
  A reference to the instance when it is a UIPageViewController.
*/
@property (nonatomic, readonly, strong) UIPageViewController * _Nullable pageViewController;
/**
  A reference to the UIViewControllers.
*/
@property (nonatomic, copy) NSArray<UIViewController *> * _Nonnull viewControllers;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithViewControllers:(NSArray<UIViewController *> * _Nonnull)viewControllers selectedIndex:(NSInteger)selectedIndex OBJC_DESIGNATED_INITIALIZER;
/**
  To execute in the order of the layout chain, override this
  method. LayoutSubviews should be called immediately, unless you
  have a certain need.
*/
- (void)layoutSubviews;
/**
  Sets the view controllers.
  <ul>
    <li>
      _ viewController: An Array of UIViewControllers.
    </li>
  </ul>
  \param direction A UIPageViewControllerNavigationDirection enum value.

  \param animated A boolean indicating to include animation.

  \param completion An optional completion block.

*/
- (void)setViewControllers:(NSArray<UIViewController *> * _Nonnull)viewControllers direction:(UIPageViewControllerNavigationDirection)direction animated:(BOOL)animated completion:(void (^ _Nullable)(BOOL))completion;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
- (void)prepareRootViewController;
/**
  Prepares the pageTabBarItems.
*/
- (void)preparePageTabBarItems;
/**
  Handles the pageTabBarButton.
  \param button A UIButton.

*/
- (void)handlePageTabBarButtonWithButton:(UIButton * _Nonnull)button;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UIScrollView;

@interface PageTabBarController (SWIFT_EXTENSION(HafsaInspectorApp)) <UIScrollViewDelegate>
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end


@interface PageTabBarController (SWIFT_EXTENSION(HafsaInspectorApp)) <UIPageViewControllerDelegate>
- (void)pageViewController:(UIPageViewController * _Nonnull)pageViewController didFinishAnimating:(BOOL)finished previousViewControllers:(NSArray<UIViewController *> * _Nonnull)previousViewControllers transitionCompleted:(BOOL)completed;
@end


@interface PageTabBarController (SWIFT_EXTENSION(HafsaInspectorApp)) <UIPageViewControllerDataSource>
- (UIViewController * _Nullable)pageViewController:(UIPageViewController * _Nonnull)pageViewController viewControllerBeforeViewController:(UIViewController * _Nonnull)viewController;
- (UIViewController * _Nullable)pageViewController:(UIPageViewController * _Nonnull)pageViewController viewControllerAfterViewController:(UIViewController * _Nonnull)viewController;
@end


SWIFT_PROTOCOL_NAMED("PageTabBarControllerDelegate")
@protocol PageTabBarControllerDelegate
@optional
/**
  A delegation method that is executed when a UIViewController did transition to.
  \param pageTabBarController A PageTabBarController.

  \param willTransitionTo viewController A UIViewController.

*/
- (void)pageTabBarControllerWithPageTabBarController:(PageTabBarController * _Nonnull)pageTabBarController didTransitionTo:(UIViewController * _Nonnull)viewController;
@end


SWIFT_CLASS("_TtC17HafsaInspectorApp14PageTabBarItem")
@interface PageTabBarItem : FlatButton
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

@class PHCachingImageManager;
@protocol PhotoLibraryDelegate;

SWIFT_CLASS_NAMED("PhotoLibrary")
@interface PhotoLibrary : NSObject
/**
  A reference to the PHCachingImageManager.
*/
@property (nonatomic, strong) PHCachingImageManager * _Nonnull cachingImageManager;
/**
  A reference to a PhotoLibraryDelegate.
*/
@property (nonatomic, weak) id <PhotoLibraryDelegate> _Nullable delegate;
/**
  The current PHAuthorizationStatus.
*/
@property (nonatomic, readonly) PHAuthorizationStatus authorizationStatus;
/**
  An initializer that prepares the PhotoLibrary.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface PhotoLibrary (SWIFT_EXTENSION(HafsaInspectorApp))
@end


@interface PhotoLibrary (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  Performes an asynchronous change to the PHPhotoLibrary database.
  <ul>
    <li>
      _ block: A transactional block that ensures that
      all changes to the PHPhotoLibrary are atomic.
    </li>
  </ul>
  \param completion A completion block that is executed once the
  transaction has been completed.

*/
- (void)performChanges:(void (^ _Nonnull)(void))block completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
@end


@interface PhotoLibrary (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  A method to request authorization from the user to enable photo library access. In order
  for this to work, set the “Privacy - Photo Library Usage Description” value in the
  application’s info.plist.
  <ul>
    <li>
      _ completion: A completion block that passes in a PHAuthorizationStatus
      enum that describes the response for the authorization request.
    </li>
  </ul>
*/
- (void)requestAuthorization:(void (^ _Nullable)(PHAuthorizationStatus))completion;
@end

@class PHChange;

@interface PhotoLibrary (SWIFT_EXTENSION(HafsaInspectorApp)) <PHPhotoLibraryChangeObserver>
/**
  A delegation method that is fired when changes are made in the photo library.
  <ul>
    <li>
      _ changeInstance: A PHChange obejct describing the changes in the
      photo library.
    </li>
  </ul>
*/
- (void)photoLibraryDidChange:(PHChange * _Nonnull)changeInfo;
@end

@class PHCollectionList;
@class PHFetchOptions;
@class PHCollection;

@interface PhotoLibrary (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  Fetches PHCollections in a given PHCollectionList.
  \param in collectionList A PHCollectionList.

  \param options An optional PHFetchOptions object.

  \param completion A completion callback.

*/
- (NSArray<PHCollection *> * _Nonnull)fetchCollectionsIn:(PHCollectionList * _Nonnull)collectionList options:(PHFetchOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<PHCollection *> * _Nonnull, PHFetchResult<PHCollection *> * _Nonnull))completion;
/**
  Fetches PHCollections based on a type and subtype.
  \param with type A PHCollectionListType.

  \param subtype A PHCollectionListSubtype.

  \param options An optional PHFetchOptions object.

  \param completion A completion callback.

*/
- (NSArray<PHCollection *> * _Nonnull)fetchTopLevelUserCollectionsWith:(PHFetchOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<PHCollection *> * _Nonnull, PHFetchResult<PHCollection *> * _Nonnull))completion;
@end

@class PHAssetCollection;

@interface PhotoLibrary (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  A PHAssetCollectionTypeMoment collection type will be contained
  by a PHCollectionListSubtypeMomentListCluster and a
  PHCollectionListSubtypeMomentListYear. Non-moment PHAssetCollections
  will only be contained by a single collection list.
  <ul>
    <li>
      _ collection: A PHCollection.
    </li>
  </ul>
  \param options An optional PHFetchOptions object.

  \param completion A completion callback.

*/
- (NSArray<PHCollectionList *> * _Nonnull)fetchCollectionListsContaining:(PHCollection * _Nonnull)collection options:(PHFetchOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<PHCollectionList *> * _Nonnull, PHFetchResult<PHCollectionList *> * _Nonnull))completion;
/**
  Fetch PHCollectionLists based on a type and subtype.
  \param with type A PHCollectionListType.

  \param subtype A PHCollectionListSubtype.

  \param options An optional PHFetchOptions object.

  \param completion A completion callback.

*/
- (NSArray<PHCollectionList *> * _Nonnull)fetchCollectionListWith:(PHCollectionListType)type subtype:(PHCollectionListSubtype)subtype options:(PHFetchOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<PHCollectionList *> * _Nonnull, PHFetchResult<PHCollectionList *> * _Nonnull))completion;
/**
  Fetch collection lists of a single type matching the
  provided local identifiers (type is inferred from the
  local identifiers).
  \param withLocalIdentifier identifiers An Array
  of String identifiers.

  \param options An optional PHFetchOptions object.

  \param completion A completion callback.

*/
- (NSArray<PHCollectionList *> * _Nonnull)fetchCollectionListsWithLocalIdentifiers:(NSArray<NSString *> * _Nonnull)identifiers options:(PHFetchOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<PHCollectionList *> * _Nonnull, PHFetchResult<PHCollectionList *> * _Nonnull))completion;
/**
  Fetch asset collections of a single type and subtype
  provided (use PHCollectionListSubtypeAny to match all
  subtypes).
  \param with collectionListType A PHCollectionListType.

  \param subtype A PHCollectionListSubtype.

  \param options An optional PHFetchOptions object.

  \param completion A completion callback.

*/
- (NSArray<PHCollectionList *> * _Nonnull)fetchCollectionListsWith:(PHCollectionListType)collectionListType subtype:(PHCollectionListSubtype)subtype options:(PHFetchOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<PHCollectionList *> * _Nonnull, PHFetchResult<PHCollectionList *> * _Nonnull))completion;
/**
  Fetch moment lists containing a given moment.
  \param with momentListSubtype A PHCollectionListSubtype.

  \param containingMoment moment A PHAssetCollection.

  \param options An optional PHFetchOptions object.

  \param completion A completion callback.

*/
- (NSArray<PHCollectionList *> * _Nonnull)fetchMomentListsWith:(PHCollectionListSubtype)momentListSubtype containingMoment:(PHAssetCollection * _Nonnull)moment options:(PHFetchOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<PHCollectionList *> * _Nonnull, PHFetchResult<PHCollectionList *> * _Nonnull))completion;
/**
  Fetch moment lists.
  \param with momentListSubtype A PHCollectionListSubtype.

  \param options An optional PHFetchOptions object.

  \param completion A completion callback.

*/
- (NSArray<PHCollectionList *> * _Nonnull)fetchMomentListsWith:(PHCollectionListSubtype)momentListSubtype options:(PHFetchOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<PHCollectionList *> * _Nonnull, PHFetchResult<PHCollectionList *> * _Nonnull))completion;
@end

@class PHAsset;

@interface PhotoLibrary (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  Fetch asset collections of a single type matching the provided
  local identifiers (type is inferred from the local identifiers).
  \param withLocalIdentifiers identifiers An Array of Strings.

  \param options An optional PHFetchOptions object.

  \param completion A completion block.

*/
- (NSArray<PHAssetCollection *> * _Nonnull)fetchAssetCollectionsWithLocalIdentifiers:(NSArray<NSString *> * _Nonnull)identifiers options:(PHFetchOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<PHAssetCollection *> * _Nonnull, PHFetchResult<PHAssetCollection *> * _Nonnull))completion;
/**
  Fetch asset collections of a single type and subtype provided
  (use PHAssetCollectionSubtypeAny to match all subtypes).
  \param with type A PHAssetCollectionType.

  \param subtype A PHAssetCollectionSubtype.

  \param options An optional PHFetchOptions object.

  \param completion A completion block.

*/
- (NSArray<PHAssetCollection *> * _Nonnull)fetchAssetCollectionsWith:(PHAssetCollectionType)type subtype:(PHAssetCollectionSubtype)subtype options:(PHFetchOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<PHAssetCollection *> * _Nonnull, PHFetchResult<PHAssetCollection *> * _Nonnull))completion;
/**
  Smart Albums are not supported, only Albums and Moments.
  \param asset A PHAsset.

  \param with type A PHAssetCollectionType.

  \param options An optional PHFetchOptions object.

  \param completion A completion block.

*/
- (NSArray<PHAssetCollection *> * _Nonnull)fetchAssetCollectionsContaining:(PHAsset * _Nonnull)asset with:(PHAssetCollectionType)type options:(PHFetchOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<PHAssetCollection *> * _Nonnull, PHFetchResult<PHAssetCollection *> * _Nonnull))completion;
/**
  AssetGroupURLs are URLs retrieved from ALAssetGroup’s
  ALAssetsGroupPropertyURL.
  \param withALAssetGroupURLs assetGroupURLs An Array
  of URLs.

  \param options An optional PHFetchOptions object.

  \param completion A completion block.

*/
- (NSArray<PHAssetCollection *> * _Nonnull)fetchAssetCollectionsWithALAssetGroupURLs:(NSArray<NSURL *> * _Nonnull)assetGroupURLs options:(PHFetchOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<PHAssetCollection *> * _Nonnull, PHFetchResult<PHAssetCollection *> * _Nonnull))completion;
/**
  Fetches moments in a given moment list.
  \param inMomentList momentList A PHCollectionList.

  \param options An optional PHFetchOptions object.

  \param completion A completion block.

*/
- (NSArray<PHAssetCollection *> * _Nonnull)fetchMomentsInMomentList:(PHCollectionList * _Nonnull)momentList options:(PHFetchOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<PHAssetCollection *> * _Nonnull, PHFetchResult<PHAssetCollection *> * _Nonnull))completion;
/**
  Fetches moments.
  \param with options An optional PHFetchOptions object.

  \param completion A completion block.

*/
- (NSArray<PHAssetCollection *> * _Nonnull)fetchMomentsWith:(PHFetchOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<PHAssetCollection *> * _Nonnull, PHFetchResult<PHAssetCollection *> * _Nonnull))completion;
@end


@interface PhotoLibrary (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  Fetch the PHAssets in a given PHAssetCollection.
  \param in assetCollection A PHAssetCollection.

  \param options An optional PHFetchOptions object.

  \param completion A completion block.

*/
- (NSArray<PHAsset *> * _Nonnull)fetchAssetsIn:(PHAssetCollection * _Nonnull)assetCollection options:(PHFetchOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<PHAsset *> * _Nonnull, PHFetchResult<PHAsset *> * _Nonnull))completion;
/**
  Fetch the PHAssets with a given Array of identifiers.
  \param withLocalIdentifiers identifiers A Array of
  String identifiers.

  \param options An optional PHFetchOptions object.

  \param completion A completion block.

*/
- (NSArray<PHAsset *> * _Nonnull)fetchAssetsWithLocalIdentifiers:(NSArray<NSString *> * _Nonnull)identifiers options:(PHFetchOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<PHAsset *> * _Nonnull, PHFetchResult<PHAsset *> * _Nonnull))completion;
/**
  Fetch key assets.
  \param in assetCollection A PHAssetCollection.

  \param options An optional PHFetchOptions object.

  \param completion A completion block.


  returns:
  An optional PHFetchResult<PHAsset> object.
*/
- (PHFetchResult<PHAsset *> * _Nullable)fetchKeyAssetsIn:(PHAssetCollection * _Nonnull)assetCollection options:(PHFetchOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<PHAsset *> * _Nonnull, PHFetchResult<PHAsset *> * _Nonnull))completion;
/**
  Fetch a burst asset with a given burst identifier.
  \param withBurstIdentifier burstIdentifier A
  PHAssetCollection.

  \param options An optional PHFetchOptions object.

  \param completion A completion block.

*/
- (NSArray<PHAsset *> * _Nonnull)fetchAssetsWithBurstIdentifier:(NSString * _Nonnull)burstIdentifier options:(PHFetchOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<PHAsset *> * _Nonnull, PHFetchResult<PHAsset *> * _Nonnull))completion;
/**
  Fetches PHAssetSourceTypeUserLibrary assets by default (use
  includeAssetSourceTypes option to override).
  \param with options An optional PHFetchOptions object.

  \param completion A completion block.

*/
- (NSArray<PHAsset *> * _Nonnull)fetchAssetsWith:(PHFetchOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<PHAsset *> * _Nonnull, PHFetchResult<PHAsset *> * _Nonnull))completion;
/**
  Fetch the PHAssets with a given media type.
  \param in mediaType A PHAssetMediaType.

  \param options An optional PHFetchOptions object.

  \param completion A completion block.

*/
- (NSArray<PHAsset *> * _Nonnull)fetchAssetsWith:(PHAssetMediaType)mediaType options:(PHFetchOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<PHAsset *> * _Nonnull, PHFetchResult<PHAsset *> * _Nonnull))completion;
/**
  AssetURLs are URLs retrieved from ALAsset’s
  ALAssetPropertyAssetURL.
  \param withALAssetURLs assetURLs An Array of URLs.

  \param options An optional PHFetchOptions object.

  \param completion A completion block.

*/
- (NSArray<PHAsset *> * _Nonnull)fetchAssetsWithALAssetURLs:(NSArray<NSURL *> * _Nonnull)assetURLs options:(PHFetchOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<PHAsset *> * _Nonnull, PHFetchResult<PHAsset *> * _Nonnull))completion;
@end

@class PHImageRequestOptions;
@class PHLivePhotoRequestOptions;
@class PHLivePhoto;
@class PHVideoRequestOptions;
@class AVPlayerItem;
@class AVAssetExportSession;
@class AVAsset;
@class AVAudioMix;

@interface PhotoLibrary (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  Retrieves an optional UIImage for a given PHAsset that allows for a targetSize
  and contentMode.
  \param for asset A PHAsset.

  \param targetSize A CGSize.

  \param contentMode A PHImageContentMode.

  \param options A PHImageRequestOptions.

  \param completion A completion block.


  returns:
  A PHImageRequestID.
*/
- (PHImageRequestID)requestImageFor:(PHAsset * _Nonnull)asset targetSize:(CGSize)targetSize contentMode:(PHImageContentMode)contentMode options:(PHImageRequestOptions * _Nullable)options completion:(void (^ _Nonnull)(UIImage * _Nullable, NSDictionary * _Nullable))completion;
/**
  Retrieves an optional Data object for a given PHAsset.
  \param for asset A PHAsset.

  \param options A PHImageRequestOptions.

  \param completion A completion block.


  returns:
  A PHImageRequestID.
*/
- (PHImageRequestID)requestImageDataFor:(PHAsset * _Nonnull)asset options:(PHImageRequestOptions * _Nullable)options completion:(void (^ _Nonnull)(NSData * _Nullable, NSString * _Nullable, UIImageOrientation, NSDictionary * _Nullable))completion;
/**
  Cancels an image request for a given PHImageRequestID.
  \param for requestID A PHImageRequestID.

*/
- (void)cancelImageRequestFor:(PHImageRequestID)requestID;
/**
  Requests a live photo representation of the asset. With
  oportunistic (or if no
  options are specified), the resultHandler block may be
  called more than once (the first call may occur before
  the method returns). The PHImageResultIsDegradedKey key
  in the result handler’s info parameter indicates when a
  temporary low-quality live photo is provided.
  \param for asset A PHAsset.

  \param targetSize A CGSize.

  \param contentMode A PHImageContentMode.

  \param options A PHImageRequestOptions.

  \param completion A completion block.


  returns:
  A PHImageRequestID.
*/
- (PHImageRequestID)requestLivePhotoFor:(PHAsset * _Nonnull)asset targetSize:(CGSize)targetSize contentMode:(PHImageContentMode)contentMode options:(PHLivePhotoRequestOptions * _Nullable)options completion:(void (^ _Nonnull)(PHLivePhoto * _Nullable, NSDictionary * _Nullable))completion;
/**
  For playback only.
  \param forVideo asset A PHAsset.

  \param options A PHImageRequestOptions.

  \param completion A completion block.


  returns:
  A PHImageRequestID.
*/
- (PHImageRequestID)requestPlayerItemForVideo:(PHAsset * _Nonnull)asset options:(PHVideoRequestOptions * _Nullable)options completion:(void (^ _Nonnull)(AVPlayerItem * _Nullable, NSDictionary * _Nullable))completion;
/**
  Export.
  \param forVideo asset A PHAsset.

  \param options A PHImageRequestOptions.

  \param completion A completion block.


  returns:
  A PHImageRequestID.
*/
- (PHImageRequestID)requestExportSessionForVideo:(PHAsset * _Nonnull)asset options:(PHVideoRequestOptions * _Nullable)options exportPreset:(NSString * _Nonnull)exportPreset completion:(void (^ _Nonnull)(AVAssetExportSession * _Nullable, NSDictionary * _Nullable))completion;
/**
  For all other requests.
  \param forVideo asset A PHAsset.

  \param options A PHImageRequestOptions.

  \param completion A completion block.


  returns:
  A PHImageRequestID.
*/
- (PHImageRequestID)requestAVAssetForVideo:(PHAsset * _Nonnull)asset options:(PHVideoRequestOptions * _Nullable)options completion:(void (^ _Nonnull)(AVAsset * _Nullable, AVAudioMix * _Nullable, NSDictionary * _Nullable))completion;
@end


SWIFT_CLASS("_TtC17HafsaInspectorApp22PhotoLibraryController")
@interface PhotoLibraryController : UIViewController
/**
  A reference to a PhotoLibrary.
*/
@property (nonatomic, readonly, strong) PhotoLibrary * _Nonnull photoLibrary;
- (void)viewDidLoad;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class PHObject;
@class PhotoLibraryMove;

SWIFT_PROTOCOL_NAMED("PhotoLibraryDelegate")
@protocol PhotoLibraryDelegate
@optional
/**
  A delegation method that is executed when the PhotoLibrary status is updated.
  \param photoLibrary A reference to the PhotoLibrary.

  \param status A reference to the PHAuthorizationStatus.

*/
- (void)photoLibraryWithPhotoLibrary:(PhotoLibrary * _Nonnull)photoLibrary status:(PHAuthorizationStatus)status;
/**
  A delegation method that is executed when the PhotoLibrary is authorized.
  \param photoLibrary A reference to the PhotoLibrary.

*/
- (void)photoLibraryWithAuthorized:(PhotoLibrary * _Nonnull)photoLibrary;
/**
  A delegation method that is executed when the PhotoLibrary is denied.
  \param photoLibrary A reference to the PhotoLibrary.

*/
- (void)photoLibraryWithDenied:(PhotoLibrary * _Nonnull)photoLibrary;
/**
  A delegation method that is executed when the PhotoLibrary is not determined.
  \param photoLibrary A reference to the PhotoLibrary.

*/
- (void)photoLibraryWithNotDetermined:(PhotoLibrary * _Nonnull)photoLibrary;
/**
  A delegation method that is executed when the PhotoLibrary is restricted.
  \param photoLibrary A reference to the PhotoLibrary.

*/
- (void)photoLibraryWithRestricted:(PhotoLibrary * _Nonnull)photoLibrary;
/**
  A delegation method that is executed when the PhotoLibrary has changes,
  locally or remotely.
  \param photoLibrary A reference to the PhotoLibrary.

  \param changeInfo A reference to a PHChange object.

*/
- (void)photoLibraryWithPhotoLibrary:(PhotoLibrary * _Nonnull)photoLibrary didChange:(PHChange * _Nonnull)changeInfo;
/**
  A delegation method that is executed when changes are detected.
  \param photoLibrary A reference to the PhotoLibrary.

  \param beforeChanges A PHObject before changes.

  \param afterChanges A PHObject after changes.

  \param assetContentChanged A Bool that is true if the image or video content for this
  object has changed.

  \param objectWasDeleted A Bool that is true if the object was deleted.

*/
- (void)photoLibraryWithPhotoLibrary:(PhotoLibrary * _Nonnull)photoLibrary beforeChanges:(PHObject * _Nonnull)beforeChanges afterChanges:(PHObject * _Nonnull)afterChanges assetContentChanged:(BOOL)assetContentChanged objectWasDeleted:(BOOL)objectWasDeleted;
/**
  A delegation method that is executed when there is a change in the
  fetchResult object.
  \param photoLibrary A reference to the PhotoLibrary.

  \param fetchBeforeChanges A PHFetchResult<PHObject> before changes.

  \param fetchAfterChanges A PHFetchResult<PHObject> after changes.
  changes exist. True if yes, false otherwise.

*/
- (void)photoLibraryWithPhotoLibrary:(PhotoLibrary * _Nonnull)photoLibrary fetchBeforeChanges:(PHFetchResult<PHObject *> * _Nonnull)fetchBeforeChanges fetchAfterChanges:(PHFetchResult<PHObject *> * _Nonnull)fetchAfterChanges;
/**
  A delegation method that is executed when there are moved objects.
  \param photoLibrary A reference to the PhotoLibrary.

  \param removed indexes An IndexSet of the removed indexes.

  \param for objects An Array of PHObjects that have been removed.

*/
- (void)photoLibraryWithPhotoLibrary:(PhotoLibrary * _Nonnull)photoLibrary removed:(NSIndexSet * _Nonnull)indexes for:(NSArray<PHObject *> * _Nonnull)objects;
/**
  A delegation method that is executed when there are newly inserted objects.
  \param photoLibrary A reference to the PhotoLibrary.

  \param inserted indexes An IndexSet of the inserted indexes.

  \param for objects An Array of PHObjects that have been inserted.

*/
- (void)photoLibraryWithPhotoLibrary:(PhotoLibrary * _Nonnull)photoLibrary inserted:(NSIndexSet * _Nonnull)indexes for:(NSArray<PHObject *> * _Nonnull)objects;
/**
  A delegation method that is executed when there are changed objects.
  \param photoLibrary A reference to the PhotoLibrary.

  \param changed indexes An IndexSet of the changed indexes.

  \param for objects An Array of PHObjects that have been changed.

*/
- (void)photoLibraryWithPhotoLibrary:(PhotoLibrary * _Nonnull)photoLibrary changed:(NSIndexSet * _Nonnull)indexes for:(NSArray<PHObject *> * _Nonnull)objects;
/**
  A delegation method that is executed describing the removed, inserted
  and changed indexes.
  \param photoLibrary A reference to the PhotoLibrary.

  \param removedIndexes An IndexSet of the changed indexes.

  \param insertedIndexes An IndexSet of the inserted indexes.

  \param changedIndexes An IndexSet of the changed indexes.

  \param has moves An Array of move coordinates.

*/
- (void)photoLibraryWithPhotoLibrary:(PhotoLibrary * _Nonnull)photoLibrary removedIndexes:(NSIndexSet * _Nullable)removedIndexes insertedIndexes:(NSIndexSet * _Nullable)insertedIndexes changedIndexes:(NSIndexSet * _Nullable)changedIndexes has:(NSArray<PhotoLibraryMove *> * _Nonnull)moves;
@end


@interface PhotoLibraryController (SWIFT_EXTENSION(HafsaInspectorApp)) <PhotoLibraryDelegate>
@end



SWIFT_CLASS_NAMED("PhotoLibraryMove")
@interface PhotoLibraryMove : NSObject
/**
  An index that is being moved from.
*/
@property (nonatomic, readonly) NSInteger from;
/**
  An index that is being moved to.
*/
@property (nonatomic, readonly) NSInteger to;
/**
  An initializer that accepts a \code
  from
  \endcode and \code
  to
  \endcode Int value.
  \param from An Int.

  \param to An Int.

*/
- (nonnull instancetype)initFrom:(NSInteger)from to:(NSInteger)to OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, PulseAnimation, "PulseAnimation") {
  PulseAnimationNone = 0,
  PulseAnimationCenter = 1,
  PulseAnimationCenterWithBacking = 2,
  PulseAnimationCenterRadialBeyondBounds = 3,
  PulseAnimationRadialBeyondBounds = 4,
  PulseAnimationBacking = 5,
  PulseAnimationPoint = 6,
  PulseAnimationPointWithBacking = 7,
};



SWIFT_CLASS("_TtC17HafsaInspectorApp12RaisedButton")
@interface RaisedButton : Button
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

enum RemindersAuthorizationStatus : NSInteger;
@class EKEventStore;
@protocol RemindersDelegate;

SWIFT_CLASS_NAMED("Reminders")
@interface Reminders : NSObject
/**
  The current ReminderAuthorizationStatus.
*/
@property (nonatomic, readonly) enum RemindersAuthorizationStatus authorizationStatus;
/**
  A reference to the eventStore.
*/
@property (nonatomic, strong) EKEventStore * _Nonnull eventStore;
/**
  A reference to a RemindersDelegate.
*/
@property (nonatomic, weak) id <RemindersDelegate> _Nullable delegate;
- (void)requestAuthorization:(void (^ _Nullable)(enum RemindersAuthorizationStatus))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class EKCalendar;
@class EKReminder;

@interface Reminders (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  A method for retrieving reminders from an optionally existing list.
  if the list does not exist the reminders will be retrieved from the default reminders list
  \param list An optional EKCalendar.

  \param completion completion call back

*/
- (void)fetchRemindersWithList:(EKCalendar * _Nonnull)list completion:(void (^ _Nonnull)(NSArray<EKReminder *> * _Nonnull))completion;
/**
  A method for adding a new reminder to an optionally existing list.
  if the list does not exist it will be added to the default reminders list.
  \param completion optional completion call back

*/
- (void)createWithTitle:(NSString * _Nonnull)title dateComponents:(NSDateComponents * _Nonnull)dateComponents in:(EKCalendar * _Nullable)list completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/**
  A method for adding a new reminder to an optionally existing list.
  if the list does not exist it will be added to the default reminders list.
  \param completion optional completion call back

*/
- (void)deleteWithReminder:(EKReminder * _Nonnull)reminder completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end


@interface Reminders (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  A method for creating new Reminder lists
  \param list title the name of the list

  \param completion optional completion call back

*/
- (void)createWithList:(NSString * _Nonnull)title completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/**
  A method for deleting existing Reminder lists
  \param list identifier the name of the list

  \param completion optional completion call back

*/
- (void)deleteWithList:(NSString * _Nonnull)identifier completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/**
  A method for retrieving reminder lists
  \param completion completion call back

*/
- (void)fetchListsWithCompletion:(void (^ _Nonnull)(NSArray<EKCalendar *> * _Nonnull))completion;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, RemindersAuthorizationStatus, "RemindersAuthorizationStatus") {
  RemindersAuthorizationStatusAuthorized = 0,
  RemindersAuthorizationStatusDenied = 1,
};


SWIFT_CLASS("_TtC17HafsaInspectorApp19RemindersController")
@interface RemindersController : UIViewController
/**
  A reference to a Reminder.
*/
@property (nonatomic, readonly, strong) Reminders * _Nonnull reminders;
- (void)viewDidLoad;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("RemindersDelegate")
@protocol RemindersDelegate
@optional
/**
  A delegation method that is executed when the Reminder status is updated.
  \param reminders A reference to the Reminder.

  \param status A reference to the ReminderAuthorizationStatus.

*/
- (void)remindersWithReminders:(Reminders * _Nonnull)reminders status:(enum RemindersAuthorizationStatus)status;
/**
  A delegation method that is executed when Reminders is authorized.
  \param reminders A reference to the Reminders.

*/
- (void)remindersWithAuthorized:(Reminders * _Nonnull)reminders;
/**
  A delegation method that is executed when Reminders is denied.
  \param reminders A reference to the Reminders.

*/
- (void)remindersWithDenied:(Reminders * _Nonnull)reminders;
/**
  A delegation method that is executed when a new Reminders list is created
  \param reminders A reference to the Reminders.

  \param list A reference to the calendar created

  \param created A boolean describing if the operation succeeded or not.

*/
- (void)remindersWithReminders:(Reminders * _Nonnull)reminders list:(EKCalendar * _Nonnull)list created:(BOOL)created;
/**
  A delegation method that is executed when a new Reminders list is created
  \param reminders A reference to the Reminder.

  \param list A reference to the calendar created

  \param deleted A boolean describing if the operation succeeded or not.

*/
- (void)remindersWithReminders:(Reminders * _Nonnull)reminders list:(EKCalendar * _Nonnull)list deleted:(BOOL)deleted;
/**
  A delegation method that is executed when a new Reminders list is created
  \param reminders A reference to the Reminder.

  \param created A boolean describing if the operation succeeded or not.

*/
- (void)remindersWithReminders:(Reminders * _Nonnull)reminders created:(BOOL)created;
/**
  A delegation method that is executed when a new Reminders list is created
  \param reminders A reference to the Reminder.

  \param deleted A boolean describing if the operation succeeded or not.

*/
- (void)remindersWithReminders:(Reminders * _Nonnull)reminders deleted:(BOOL)deleted;
@end


@interface RemindersController (SWIFT_EXTENSION(HafsaInspectorApp)) <RemindersDelegate>
@end




SWIFT_CLASS("_TtC17HafsaInspectorApp9SearchBar")
@interface SearchBar : Bar
/**
  The UITextField for the searchBar.
*/
@property (nonatomic, readonly, strong) UITextField * _Nonnull textField;
/**
  Reference to the clearButton.
*/
@property (nonatomic, readonly, strong) IconButton * _Null_unspecified clearButton;
/**
  Handle the clearButton manually.
*/
@property (nonatomic) BOOL isClearButtonAutoHandleEnabled;
/**
  TintColor for searchBar.
*/
@property (nonatomic, strong) UIColor * _Nullable tintColor;
/**
  TextColor for searchBar.
*/
@property (nonatomic, strong) UIColor * _Nullable textColor;
/**
  Sets the textField placeholder value.
*/
@property (nonatomic, copy) NSString * _Nullable placeholder;
/**
  Placeholder textColor.
*/
@property (nonatomic, strong) UIColor * _Nonnull placeholderColor;
- (void)layoutSubviews;
/**
  An initializer that initializes the object with a NSCoder object.
  \param aDecoder A NSCoder instance.

*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  An initializer that initializes the object with a CGRect object.
  If AutoLayout is used, it is better to initilize the instance
  using the init() initializer.
  \param frame A CGRect instance.

*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  A convenience initializer with parameter settings.
  \param leftViews An Array of UIViews that go on the left side.

  \param rightViews An Array of UIViews that go on the right side.

*/
- (nonnull instancetype)initWithLeftViews:(NSArray<UIView *> * _Nullable)leftViews rightViews:(NSArray<UIView *> * _Nullable)rightViews OBJC_DESIGNATED_INITIALIZER;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
/**
  Layout the clearButton.
*/
- (void)layoutClearButton;
/**
  Clears the textField text.
*/
- (void)handleClearButton;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC17HafsaInspectorApp19SearchBarController")
@interface SearchBarController : RootController
/**
  Reference to the SearchBar.
*/
@property (nonatomic, readonly, strong) SearchBar * _Nonnull searchBar;
/**
  To execute in the order of the layout chain, override this
  method. LayoutSubviews should be called immediately, unless you
  have a certain need.
*/
- (void)layoutSubviews;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
@end

@class MBProgressHUD;
@class NSString;

SWIFT_CLASS("_TtC17HafsaInspectorApp22SettingsViewController")
@interface SettingsViewController : UIViewController <UIScrollViewDelegate, UITableViewDataSource, UITableViewDelegate>
@property (nonatomic, weak) IBOutlet UITableView * _Null_unspecified tableView;
@property (nonatomic, strong) MBProgressHUD * _Nonnull progess;
@property (nonatomic) BOOL isAdmin;
@property (nonatomic) BOOL isFromAdmin;
@property (nonatomic, strong) NSString * _Nonnull selectedChapter;
@property (nonatomic, strong) NSDictionary * _Nonnull filedata;
- (void)viewDidLoad;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)getData;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ShapePreset, "ShapePreset") {
  ShapePresetNone = 0,
  ShapePresetSquare = 1,
  ShapePresetCircle = 2,
};

enum SnackbarStatus : NSInteger;

SWIFT_CLASS("_TtC17HafsaInspectorApp8Snackbar")
@interface Snackbar : Bar
/**
  A convenience property to set the titleLabel text.
*/
@property (nonatomic, copy) NSString * _Nullable text;
/**
  Text label.
*/
@property (nonatomic, strong) UILabel * _Nonnull textLabel;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/**
  The status of the snackbar.
*/
@property (nonatomic) enum SnackbarStatus status;
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event;
- (void)layoutSubviews;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLeftViews:(NSArray<UIView *> * _Nullable)leftViews rightViews:(NSArray<UIView *> * _Nullable)rightViews OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SnackbarAlignment, "SnackbarAlignment") {
  SnackbarAlignmentTop = 0,
  SnackbarAlignmentBottom = 1,
};

@protocol SnackbarControllerDelegate;

SWIFT_CLASS("_TtC17HafsaInspectorApp18SnackbarController")
@interface SnackbarController : RootController
/**
  Reference to the Snackbar.
*/
@property (nonatomic, readonly, strong) Snackbar * _Nonnull snackbar;
/**
  A boolean indicating if the Snacbar is animating.
*/
@property (nonatomic) BOOL isAnimating;
/**
  Delegation handler.
*/
@property (nonatomic, weak) id <SnackbarControllerDelegate> _Nullable delegate;
/**
  Snackbar alignment setting.
*/
@property (nonatomic) enum SnackbarAlignment snackbarAlignment;
/**
  Animates to a SnackbarStatus.
  \param status A SnackbarStatus enum value.

*/
- (void (^ _Nullable)(BOOL))animateWithSnackbar:(enum SnackbarStatus)status delay:(NSTimeInterval)delay animations:(void (^ _Nullable)(Snackbar * _Nonnull))animations completion:(void (^ _Nullable)(Snackbar * _Nonnull))completion;
/**
  To execute in the order of the layout chain, override this
  method. LayoutSubviews should be called immediately, unless you
  have a certain need.
*/
- (void)layoutSubviews;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("SnackbarControllerDelegate")
@protocol SnackbarControllerDelegate
@optional
/**
  A delegation method that is executed when a Snackbar will show.
  \param snackbarController A SnackbarController.

*/
- (void)snackbarControllerWillShowWithSnackbarController:(SnackbarController * _Nonnull)snackbarController;
/**
  A delegation method that is executed when a Snackbar did show.
  \param snackbarController A SnackbarController.

*/
- (void)snackbarControllerDidShowWithSnackbarController:(SnackbarController * _Nonnull)snackbarController;
/**
  A delegation method that is executed when a Snackbar will hide.
  \param snackbarController A SnackbarController.

*/
- (void)snackbarControllerWillHideWithSnackbarController:(SnackbarController * _Nonnull)snackbarController;
/**
  A delegation method that is executed when a Snackbar did hide.
  \param snackbarController A SnackbarController.

*/
- (void)snackbarControllerDidHideWithSnackbarController:(SnackbarController * _Nonnull)snackbarController;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SnackbarStatus, "SnackbarStatus") {
  SnackbarStatusVisible = 0,
  SnackbarStatusHidden = 1,
};


SWIFT_CLASS("_TtC17HafsaInspectorApp19StatusBarController")
@interface StatusBarController : RootController
/**
  A reference to the statusBar.
*/
@property (nonatomic, readonly, strong) View * _Nonnull statusBar;
/**
  To execute in the order of the layout chain, override this
  method. LayoutSubviews should be called immediately, unless you
  have a certain need.
*/
- (void)layoutSubviews;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17HafsaInspectorApp21SupplierTableViewCell")
@interface SupplierTableViewCell : UITableViewCell
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified supplierNameLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified poundLabel;
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified addPoundsButton;
@property (nonatomic) double previousPounds;
@property (nonatomic, strong) UITextField * _Null_unspecified tField;
- (void)configureSupplierCell:(NSInteger)index;
- (void)updatePounds:(double)pounds;
- (IBAction)addPoundsPressed:(id _Nonnull)sender;
- (void)configurationTextField:(UITextField * _Null_unspecified)textField;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

enum SwitchState : NSInteger;
enum SwitchStyle : NSInteger;
enum SwitchSize : NSInteger;
@protocol SwitchDelegate;

SWIFT_CLASS_NAMED("Switch")
@interface Switch : UIControl
/**
  An Optional delegation method.
*/
@property (nonatomic, weak) id <SwitchDelegate> _Nullable delegate;
/**
  Indicates if the animation should bounce.
*/
@property (nonatomic) BOOL bounceable;
/**
  Button on color.
*/
@property (nonatomic, strong) UIColor * _Nonnull buttonOnColor;
/**
  Button off color.
*/
@property (nonatomic, strong) UIColor * _Nonnull buttonOffColor;
/**
  Track on color.
*/
@property (nonatomic, strong) UIColor * _Nonnull trackOnColor;
/**
  Track off color.
*/
@property (nonatomic, strong) UIColor * _Nonnull trackOffColor;
/**
  Button on disabled color.
*/
@property (nonatomic, strong) UIColor * _Nonnull buttonOnDisabledColor;
/**
  Track on disabled color.
*/
@property (nonatomic, strong) UIColor * _Nonnull trackOnDisabledColor;
/**
  Button off disabled color.
*/
@property (nonatomic, strong) UIColor * _Nonnull buttonOffDisabledColor;
/**
  Track off disabled color.
*/
@property (nonatomic, strong) UIColor * _Nonnull trackOffDisabledColor;
/**
  Track view reference.
*/
@property (nonatomic, readonly, strong) CAShapeLayer * _Nonnull trackLayer;
/**
  Button view reference.
*/
@property (nonatomic, readonly, strong) FabButton * _Nonnull button;
@property (nonatomic, setter=setEnabled:) BOOL isEnabled;
/**
  A boolean indicating if the switch is on or not.
*/
@property (nonatomic) BOOL on;
/**
  Switch state.
*/
@property (nonatomic) enum SwitchState switchState;
/**
  Switch style.
*/
@property (nonatomic) enum SwitchStyle switchStyle;
/**
  Switch size.
*/
@property (nonatomic) enum SwitchSize switchSize;
@property (nonatomic) CGRect frame;
@property (nonatomic) CGRect bounds;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/**
  An initializer that initializes the object with a NSCoder object.
  \param aDecoder A NSCoder instance.

*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  An initializer that initializes the object with a CGRect object.
  If AutoLayout is used, it is better to initilize the instance
  using the init(state:style:size:) initializer, or set the CGRect
  to CGRectNull.
  \param frame A CGRect instance.

*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  An initializer that sets the state, style, and size of the Switch instance.
  \param state A SwitchState value.

  \param style A SwitchStyle value.

  \param size A SwitchSize value.

*/
- (nonnull instancetype)initWithState:(enum SwitchState)state style:(enum SwitchStyle)style size:(enum SwitchSize)size OBJC_DESIGNATED_INITIALIZER;
- (void)willMoveToSuperview:(UIView * _Nullable)newSuperview;
/**
  Toggle the Switch state, if On will be Off, and if Off will be On.
  \param completion An Optional completion block.

*/
- (void)toggleWithCompletion:(void (^ _Nullable)(Switch * _Nonnull))completion;
/**
  Sets the switch on or off.
  \param on A bool of whether the switch should be in the on state or not.

  \param animated A Boolean indicating to set the animation or not.

*/
- (void)setOnOn:(BOOL)on animated:(BOOL)animated completion:(void (^ _Nullable)(Switch * _Nonnull))completion;
/**
  Set the switchState property with an option to animate.
  \param state The SwitchState to set.

  \param animated A Boolean indicating to set the animation or not.

  \param completion An Optional completion block.

*/
- (void)setSwitchStateWithState:(enum SwitchState)state animated:(BOOL)animated completion:(void (^ _Nullable)(Switch * _Nonnull))completion;
/**
  Handle the TouchUpOutside and TouchCancel events.
  \param sender A UIButton.

  \param event A UIEvent.

*/
- (void)handleTouchUpOutsideOrCanceledWithSender:(FabButton * _Nonnull)sender event:(UIEvent * _Nonnull)event;
/**
  Handles the TouchUpInside event.
*/
- (void)handleTouchUpInside;
/**
  Handle the TouchDragInside event.
  \param sender A UIButton.

  \param event A UIEvent.

*/
- (void)handleTouchDragInsideSender:(FabButton * _Nonnull)sender event:(UIEvent * _Nonnull)event;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
@end


SWIFT_PROTOCOL_NAMED("SwitchDelegate")
@protocol SwitchDelegate
/**
  A Switch delegate method for state changes.
  \param control Switch control.

  \param state SwitchState value.

*/
- (void)switchDidChangeStateWithControl:(Switch * _Nonnull)control state:(enum SwitchState)state;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SwitchSize, "SwitchSize") {
  SwitchSizeSmall = 0,
  SwitchSizeMedium = 1,
  SwitchSizeLarge = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, SwitchState, "SwitchState") {
  SwitchStateOn = 0,
  SwitchStateOff = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, SwitchStyle, "SwitchStyle") {
  SwitchStyleLight = 0,
  SwitchStyleDark = 1,
};



SWIFT_PROTOCOL_NAMED("TabBarDelegate")
@protocol TabBarDelegate
@optional
/**
  A delegation method that is executed when the button will trigger the
  animation to the next tab.
  \param tabBar A TabBar.

  \param button A UIButton.

*/
- (void)tabBarWillSelectButtonWithTabBar:(TabBar * _Nonnull)tabBar button:(UIButton * _Nonnull)button;
/**
  A delegation method that is executed when the button did complete the
  animation to the next tab.
  \param tabBar A TabBar.

  \param button A UIButton.

*/
- (void)tabBarDidSelectButtonWithTabBar:(TabBar * _Nonnull)tabBar button:(UIButton * _Nonnull)button;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TabBarLineAlignment, "TabBarLineAlignment") {
  TabBarLineAlignmentTop = 0,
  TabBarLineAlignmentBottom = 1,
};


SWIFT_CLASS("_TtC17HafsaInspectorApp13TableViewCell")
@interface TableViewCell : UITableViewCell
/**
  A CAShapeLayer used to manage elements that would be affected by
  the clipToBounds property of the backing layer. For example, this
  allows the dropshadow effect on the backing layer, while clipping
  the image to a desired shape within the visualLayer.
*/
@property (nonatomic, readonly, strong) CAShapeLayer * _Nonnull visualLayer;
/**
  An Array of pulse layers.
*/
@property (nonatomic, readonly, copy) NSArray<CAShapeLayer *> * _Nonnull pulseLayers;
/**
  The opcaity value for the pulse animation.
*/
@property (nonatomic) CGFloat pulseOpacity;
/**
  The color of the pulse effect.
*/
@property (nonatomic, strong) UIColor * _Nonnull pulseColor;
/**
  The type of PulseAnimation.
*/
@property (nonatomic) enum PulseAnimation pulseAnimation;
/**
  A property that accesses the backing layer’s backgroundColor.
*/
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/**
  An initializer that initializes the object with a NSCoder object.
  \param aDecoder A NSCoder instance.

*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  An initializer that initializes the object.
  \param style A UITableViewCellStyle enum.

  \param reuseIdentifier A String identifier.

*/
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Null_unspecified)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSublayersOfLayer:(CALayer * _Nonnull)layer;
- (void)layoutSubviews;
/**
  A delegation method that is executed when the view has began a
  touch event.
  \param touches A set of UITouch objects.

  \param event A UIEvent object.

*/
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/**
  A delegation method that is executed when the view touch event has
  ended.
  \param touches A set of UITouch objects.

  \param event A UIEvent object.

*/
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/**
  A delegation method that is executed when the view touch event has
  been cancelled.
  \param touches A set of UITouch objects.

  \param event A UIEvent object.

*/
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
/**
  Prepares the visualLayer property.
*/
- (void)prepareVisualLayer;
/**
  Manages the layout for the visualLayer property.
*/
- (void)layoutVisualLayer;
@end

@class TextStorage;
@protocol TextDelegate;

SWIFT_CLASS_NAMED("Text")
@interface Text : NSObject
/**
  The string pattern to match within the textStorage.
*/
@property (nonatomic, copy) NSString * _Nonnull pattern;
/**
  TextStorage instance that is observed while editing.
*/
@property (nonatomic, readonly, strong) TextStorage * _Nonnull textStorage;
/**
  Delegation object for pre and post text processing.
*/
@property (nonatomic, weak) id <TextDelegate> _Nullable delegate;
/**
  Initializer.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  A convenience property that accesses the textStorage
  string.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull string;
/**
  An Array of matches that match the pattern expression.
*/
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull matches;
/**
  An Array of unique matches that match the pattern
  expression.
*/
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull uniqueMatches;
@end

@class NSTextCheckingResult;

SWIFT_PROTOCOL_NAMED("TextDelegate")
@protocol TextDelegate
@optional
/**
  An optional delegation method that is executed when
  text will be processed during editing.
  \param text The Text instance assodicated with the
  delegation object.

  \param textStorage The TextStorage instance
  associated with the delegation object.

  \param string The string value that is currently
  being edited.

  \param range The range of characters that are being
  edited.

*/
- (void)textWillProcessEditWithText:(Text * _Nonnull)text textStorage:(TextStorage * _Nonnull)textStorage string:(NSString * _Nonnull)string range:(NSRange)range;
/**
  An optional delegation method that is executed after
  the edit processing has completed.
  \param text The Text instance assodicated with the
  delegation object.

  \param textStorage The TextStorage instance
  associated with the delegation object.

  \param string The string value that was edited.

  \param result A NSTextCheckingResult associated
  with the processing result.

  \param flags Matching flags.

  \param stop Halts a service which is either
  publishing or resolving.

*/
- (void)textDidProcessEditWithText:(Text * _Nonnull)text textStorage:(TextStorage * _Nonnull)textStorage string:(NSString * _Nonnull)string result:(NSTextCheckingResult * _Nullable)result flags:(NSMatchingFlags)flags stop:(BOOL * _Nonnull)stop;
@end


@class NSMutableAttributedString;
@class NSRegularExpression;
@class NSAttributedString;

SWIFT_CLASS("_TtC17HafsaInspectorApp11TextStorage")
@interface TextStorage : NSTextStorage
/**
  A callback that is executed when a process edit will happen.
*/
@property (nonatomic, copy) void (^ _Nullable textWillProcessEdit)(TextStorage * _Nonnull, NSString * _Nonnull, NSRange);
/**
  A callback that is executed when a process edit did happen.
*/
@property (nonatomic, copy) void (^ _Nullable textDidProcessEdit)(TextStorage * _Nonnull, NSTextCheckingResult * _Nullable, NSMatchingFlags, BOOL * _Nonnull);
/**
  A storage facility for attributed text.
*/
@property (nonatomic, strong) NSMutableAttributedString * _Nonnull store;
/**
  The regular expression to match text fragments against.
*/
@property (nonatomic, strong) NSRegularExpression * _Nullable expression;
/**
  Initializer.
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  Initializer.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  A String value of the attirbutedString property.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull string;
/**
  Processes the text when editing.
*/
- (void)processEditing;
/**
  Returns the attributes for the character at a given index.
  \param location The index for which to return attributes.
  This value must lie within the bounds of the receiver.

  \param range Upon return, the range over which the
  attributes and values are the same as those at index. This range
  isn’t necessarily the maximum range covered, and its extent is
  implementation-dependent. If you need the maximum range, use
  attributesAtIndex:longestEffectiveRange:inRange:.
  If you don’t need this value, pass NULL.


  returns:
  The attributes for the character at index.
*/
- (NSDictionary<NSString *, id> * _Nonnull)attributesAtIndex:(NSUInteger)location effectiveRange:(NSRangePointer _Nullable)range;
/**
  Replaces a range of text with a string value.
  \param range The character range to replace.

  \param str The string value that the characters
  will be replaced with.

*/
- (void)replaceCharactersInRange:(NSRange)range withString:(NSString * _Nonnull)str;
/**
  Sets the attributedString attribute values.
  \param attrs The attributes to set.

  \param range A range of characters that will have their
  attributes updated.

*/
- (void)setAttributes:(NSDictionary<NSString *, id> * _Nullable)attrs range:(NSRange)range;
- (nullable instancetype)initWithFileURL:(NSURL * _Nonnull)url options:(NSDictionary * _Nonnull)options documentAttributes:(NSDictionary * _Nullable * _Nullable)dict error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithURL:(NSURL * _Nonnull)url options:(NSDictionary<NSString *, id> * _Nonnull)options documentAttributes:(NSDictionary * _Nullable * _Nullable)dict error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithData:(NSData * _Nonnull)data options:(NSDictionary<NSString *, id> * _Nonnull)options documentAttributes:(NSDictionary * _Nullable * _Nullable)dict error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithString:(NSString * _Nonnull)str SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithString:(NSString * _Nonnull)str attributes:(NSDictionary<NSString *, id> * _Nullable)attrs SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAttributedString:(NSAttributedString * _Nonnull)attrStr SWIFT_UNAVAILABLE;
@end

@class NSTextContainer;

SWIFT_CLASS_NAMED("TextView")
@interface TextView : UITextView
/**
  A property that accesses the backing layer’s backgroundColor.
*/
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/**
  The title UILabel that is displayed when there is text. The
  titleLabel text value is updated with the placeholderLabel
  text value before being displayed.
*/
@property (nonatomic, strong) UILabel * _Nullable titleLabel;
/**
  The color of the titleLabel text when the textView is not active.
*/
@property (nonatomic, strong) UIColor * _Nullable titleLabelColor;
/**
  The color of the titleLabel text when the textView is active.
*/
@property (nonatomic, strong) UIColor * _Nullable titleLabelActiveColor;
/**
  A property that sets the distance between the textView and
  titleLabel.
*/
@property (nonatomic) CGFloat titleLabelAnimationDistance;
/**
  Placeholder UILabel view.
*/
@property (nonatomic, strong) UILabel * _Nullable placeholderLabel;
/**
  An override to the text property.
*/
@property (nonatomic, copy) NSString * _Null_unspecified text;
/**
  An override to the attributedText property.
*/
@property (nonatomic, strong) NSAttributedString * _Null_unspecified attributedText;
/**
  Text container UIEdgeInset preset property. This updates the
  textContainerInset property with a preset value.
*/
@property (nonatomic) enum EdgeInsetsPreset textContainerEdgeInsetsPreset;
/**
  Text container UIEdgeInset property.
*/
@property (nonatomic) UIEdgeInsets textContainerInset;
/**
  An initializer that initializes the object with a NSCoder object.
  \param aDecoder A NSCoder instance.

*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  An initializer that initializes the object with a CGRect object.
  If AutoLayout is used, it is better to initilize the instance
  using the init() initializer.
  \param frame A CGRect instance.

  \param textContainer A NSTextContainer instance.

*/
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer OBJC_DESIGNATED_INITIALIZER;
/**
  A convenience initializer that is mostly used with AutoLayout.
  \param textContainer A NSTextContainer instance.

*/
- (nonnull instancetype)initWithTextContainer:(NSTextContainer * _Nullable)textContainer;
- (void)layoutSublayersOfLayer:(CALayer * _Nonnull)layer;
- (void)layoutSubviews;
/**
  Reloads necessary components when the view has changed.
*/
- (void)reloadView;
/**
  Notification handler for when text editing began.
*/
- (void)handleTextViewTextDidBegin;
/**
  Notification handler for when text changed.
*/
- (void)handleTextViewTextDidChange;
/**
  Notification handler for when text editing ended.
*/
- (void)handleTextViewTextDidEnd;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
@end


SWIFT_PROTOCOL_NAMED("TextViewDelegate")
@protocol TextViewDelegate <UITextViewDelegate>
@end


SWIFT_CLASS("_TtC17HafsaInspectorApp7Toolbar")
@interface Toolbar : Bar
/**
  A convenience property to set the titleLabel text.
*/
@property (nonatomic, copy) NSString * _Nullable title;
/**
  Title label.
*/
@property (nonatomic, strong) UILabel * _Nonnull titleLabel;
/**
  A convenience property to set the detailLabel text.
*/
@property (nonatomic, copy) NSString * _Nullable detail;
/**
  Detail label.
*/
@property (nonatomic, strong) UILabel * _Nonnull detailLabel;
/**
  An initializer that initializes the object with a NSCoder object.
  \param aDecoder A NSCoder instance.

*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  An initializer that initializes the object with a CGRect object.
  If AutoLayout is used, it is better to initilize the instance
  using the init() initializer.
  \param frame A CGRect instance.

*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  A convenience initializer with parameter settings.
  \param leftViews An Array of UIViews that go on the left side.

  \param rightViews An Array of UIViews that go on the right side.

*/
- (nonnull instancetype)initWithLeftViews:(NSArray<UIView *> * _Nullable)leftViews rightViews:(NSArray<UIView *> * _Nullable)rightViews OBJC_DESIGNATED_INITIALIZER;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (void)layoutSubviews;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@protocol ToolbarControllerDelegate;

SWIFT_CLASS_NAMED("ToolbarController")
@interface ToolbarController : RootController
/**
  Reference to the Toolbar.
*/
@property (nonatomic, readonly, strong) Toolbar * _Nonnull toolbar;
/**
  Delegation handler.
*/
@property (nonatomic, weak) id <ToolbarControllerDelegate> _Nullable delegate;
/**
  A floating UIViewController.
*/
@property (nonatomic, strong) UIViewController * _Nullable floatingViewController;
/**
  To execute in the order of the layout chain, override this
  method. LayoutSubviews should be called immediately, unless you
  have a certain need.
*/
- (void)layoutSubviews;
/**
  Prepares the view instance when intialized. When subclassing,
  it is recommended to override the prepare method
  to initialize property values and other setup operations.
  The super.prepare method should always be called immediately
  when subclassing.
*/
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("ToolbarControllerDelegate")
@protocol ToolbarControllerDelegate
@optional
/**
  Delegation method that executes when the floatingViewController will open.
*/
- (void)toolbarControllerWillOpenFloatingViewControllerWithToolbarController:(ToolbarController * _Nonnull)toolbarController;
/**
  Delegation method that executes when the floatingViewController will close.
*/
- (void)toolbarControllerWillCloseFloatingViewControllerWithToolbarController:(ToolbarController * _Nonnull)toolbarController;
/**
  Delegation method that executes when the floatingViewController did open.
*/
- (void)toolbarControllerDidOpenFloatingViewControllerWithToolbarController:(ToolbarController * _Nonnull)toolbarController;
/**
  Delegation method that executes when the floatingViewController did close.
*/
- (void)toolbarControllerDidCloseFloatingViewControllerWithToolbarController:(ToolbarController * _Nonnull)toolbarController;
@end


@interface UIColor (SWIFT_EXTENSION(HafsaInspectorApp))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull HIBackground;)
+ (UIColor * _Nonnull)HIBackground;
@end


@interface UIFont (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  :name:	stringSize
*/
- (CGSize)stringSizeWithString:(NSString * _Nonnull)string constrainedToWidth:(double)width;
@end


@interface UIImage (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  Asynchronously load images with a completion block.
  \param URL A URL destination to fetch the image from.

  \param completion A completion block that is executed once the image
  has been retrieved.

*/
+ (void)contentsOfURLWithUrl:(NSURL * _Nonnull)url completion:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completion;
@end


@interface UIImage (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  Creates an clear image.

  returns:
  A UIImage that is clear.
*/
+ (UIImage * _Nullable)clearWithSize:(CGSize)size;
@end


@interface UIImage (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  Crops an image to a specified width and height.
  \param toWidth tw A specified width.

  \param toHeight th A specified height.


  returns:
  An optional UIImage.
*/
- (UIImage * _Nullable)cropToWidth:(CGFloat)tw toHeight:(CGFloat)th;
@end


@interface UIImage (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  Creates an Image that is a color.
  \param color The UIColor to create the image from.

  \param size The size of the image to create.


  returns:
  A UIImage that is the color passed in.
*/
+ (UIImage * _Nullable)imageWithColorWithColor:(UIColor * _Nonnull)color size:(CGSize)size;
@end


@interface UIImage (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  Creates a new image with the passed in color.
  \param color The UIColor to create the image from.


  returns:
  A UIImage that is the color passed in.
*/
- (UIImage * _Nullable)tintWithColorWithColor:(UIColor * _Nonnull)color;
@end


@interface UIImage (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  Adjusts the orientation of the image from the capture orientation.
  This is an issue when taking images, the capture orientation is not set correctly
  when using Portrait.

  returns:
  An optional UIImage if successful.
*/
- (UIImage * _Nullable)adjustOrientation;
@end


@interface UIImage (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  Resizes an image based on a given width.
  \param toWidth w A width value.


  returns:
  An optional UIImage.
*/
- (UIImage * _Nullable)resizeToWidth:(CGFloat)w;
/**
  Resizes an image based on a given height.
  \param toHeight h A height value.


  returns:
  An optional UIImage.
*/
- (UIImage * _Nullable)resizeToHeight:(CGFloat)h;
@end


@interface UIImage (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  Width of the UIImage.
*/
@property (nonatomic, readonly) CGFloat width;
/**
  Height of the UIImage.
*/
@property (nonatomic, readonly) CGFloat height;
@end


@interface UINavigationController (SWIFT_EXTENSION(HafsaInspectorApp))
@property (nonatomic, readonly, strong) UIViewController * _Nullable topMostViewController;
@end


@interface UINavigationController (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  Device status bar style.
*/
@property (nonatomic) UIStatusBarStyle statusBarStyle;
@end


@interface UINavigationItem (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  NavigationItem reference.
*/
@property (nonatomic, strong) NavigationItem * _Nonnull navigationItem;
/**
  Should center the contentView.
*/
@property (nonatomic, readonly) enum ContentViewAlignment contentViewAlignment;
/**
  Content View.
*/
@property (nonatomic, readonly, strong) UIView * _Nonnull contentView;
/**
  Back Button.
*/
@property (nonatomic, readonly, strong) IconButton * _Nonnull backButton;
/**
  Title Label.
*/
@property (nonatomic, readonly, strong) UILabel * _Nonnull titleLabel;
/**
  Detail text.
*/
@property (nonatomic, copy) NSString * _Nullable detail;
/**
  Detail Label.
*/
@property (nonatomic, readonly, strong) UILabel * _Nonnull detailLabel;
/**
  Left side UIViews.
*/
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull leftViews;
/**
  Right side UIViews.
*/
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull rightViews;
@end


@interface UIScreen (SWIFT_EXTENSION(HafsaInspectorApp))
@end


@interface UITabBar (SWIFT_EXTENSION(HafsaInspectorApp))
@end


@interface UITabBarController (SWIFT_EXTENSION(HafsaInspectorApp))
@property (nonatomic, readonly, strong) UIViewController * _Nullable topMostViewController;
@end


@interface UITabBarItem (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  Sets the color of the title color for a state.
*/
- (void)setTitleColorWithColor:(UIColor * _Nonnull)color forState:(UIControlState)state;
@end


@interface UIView (SWIFT_EXTENSION(HafsaInspectorApp))
@property (nonatomic, readonly, strong) UIViewController * _Nullable parentViewController;
@end


@interface UIView (SWIFT_EXTENSION(HafsaInspectorApp))
@end


@interface UIView (SWIFT_EXTENSION(HafsaInspectorApp))
@end


@interface UIView (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  A property that accesses the frame.origin.x property.
*/
@property (nonatomic) CGFloat x;
/**
  A property that accesses the frame.origin.y property.
*/
@property (nonatomic) CGFloat y;
/**
  A property that accesses the frame.size.width property.
*/
@property (nonatomic) CGFloat width;
/**
  A property that accesses the frame.size.height property.
*/
@property (nonatomic) CGFloat height;
/**
  A property that manages the overall shape for the object. If either the
  width or height property is set, the other will be automatically adjusted
  to maintain the shape of the object.
*/
@property (nonatomic) enum ShapePreset shapePreset;
/**
  A preset value for Depth.
*/
@property (nonatomic) enum DepthPreset depthPreset;
/**
  A property that accesses the backing layer’s shadowColor.
*/
@property (nonatomic, strong) UIColor * _Nullable shadowColor;
/**
  A property that accesses the backing layer’s shadowOffset.
*/
@property (nonatomic) CGSize shadowOffset;
/**
  A property that accesses the backing layer’s shadowOpacity.
*/
@property (nonatomic) float shadowOpacity;
/**
  A property that accesses the backing layer’s shadowRadius.
*/
@property (nonatomic) CGFloat shadowRadius;
/**
  A property that accesses the backing layer’s shadowPath.
*/
@property (nonatomic) CGPathRef _Nullable shadowPath;
/**
  Enables automatic shadowPath sizing.
*/
@property (nonatomic) BOOL isShadowPathAutoSizing;
/**
  A property that sets the cornerRadius of the backing layer.
*/
@property (nonatomic) enum CornerRadiusPreset cornerRadiusPreset;
/**
  A property that accesses the layer.cornerRadius.
*/
@property (nonatomic) CGFloat cornerRadius;
/**
  A preset property to set the borderWidth.
*/
@property (nonatomic) enum BorderWidthPreset borderWidthPreset;
/**
  A property that accesses the layer.borderWith.
*/
@property (nonatomic) CGFloat borderWidth;
/**
  A property that accesses the layer.borderColor property.
*/
@property (nonatomic, strong) UIColor * _Nullable borderColor;
/**
  A property that accesses the layer.position property.
*/
@property (nonatomic) CGPoint position;
/**
  A property that accesses the layer.zPosition property.
*/
@property (nonatomic) CGFloat zPosition;
/**
  A method that accepts CAAnimation objects and executes them on the
  view’s backing layer.
  \param animation A CAAnimation instance.

*/
- (void)animateWithAnimation:(CAAnimation * _Nonnull)animation;
/**
  A delegation method that is executed when the backing layer stops
  running an animation.
  \param animation The CAAnimation instance that stopped running.

  \param flag A boolean that indicates if the animation stopped
  because it was completed or interrupted. True if completed, false
  if interrupted.

*/
- (void)animationDidStop:(CAAnimation * _Nonnull)animation finished:(BOOL)flag;
/**
  Manages the layout for the shape of the view instance.
*/
- (void)layoutShape;
/**
  Sets the shadow path.
*/
- (void)layoutShadowPath;
@end


@interface UIViewController (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  A convenience property that provides access to the StatusBarController.
  This is the recommended method of accessing the StatusBarController
  through child UIViewControllers.
*/
@property (nonatomic, readonly, strong) StatusBarController * _Nullable statusBarController;
@end


@interface UIViewController (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  A convenience property that provides access to the PageTabBarController.
  This is the recommended method of accessing the PageTabBarController
  through child UIViewControllers.
*/
@property (nonatomic, readonly, strong) PageTabBarController * _Nullable pageTabBarController;
@end


@interface UIViewController (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  A convenience property that provides access to the MenuController.
  This is the recommended method of accessing the MenuController
  through child UIViewControllers.
*/
@property (nonatomic, readonly, strong) MenuController * _Nullable menuController;
@end


@interface UIViewController (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  A convenience property that provides access to the SearchBarController.
  This is the recommended method of accessing the SearchBarController
  through child UIViewControllers.
*/
@property (nonatomic, readonly, strong) SearchBarController * _Nullable searchBarController;
@end


@interface UIViewController (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  A convenience property that provides access to the ToolbarController.
  This is the recommended method of accessing the ToolbarController
  through child UIViewControllers.
*/
@property (nonatomic, readonly, strong) ToolbarController * _Nullable toolbarController;
@end


@interface UIViewController (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  A convenience property that provides access to the NavigationDrawerController.
  This is the recommended method of accessing the NavigationDrawerController
  through child UIViewControllers.
*/
@property (nonatomic, readonly, strong) NavigationDrawerController * _Nullable navigationDrawerController;
@end


@interface UIViewController (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  A convenience property that provides access to the SnackbarController.
  This is the recommended method of accessing the SnackbarController
  through child UIViewControllers.
*/
@property (nonatomic, readonly, strong) SnackbarController * _Nullable snackbarController;
@end


@interface UIViewController (SWIFT_EXTENSION(HafsaInspectorApp))
@property (nonatomic, readonly, strong) UIViewController * _Nullable topMostViewController;
@end


@interface UIViewController (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  Grid reference.
*/
@property (nonatomic, readonly, strong) PageTabBarItem * _Nonnull pageTabBarItem;
@end


@interface UIViewController (SWIFT_EXTENSION(HafsaInspectorApp))
- (void)hideKeyboardWhenTappedAround;
- (void)dismissKeyboard;
- (void)setNavBarWithSettingsIcon:(NSString * _Nonnull)selector;
- (void)setNavBarWithBackButton;
- (void)backButtonPressed;
@property (nonatomic, readonly) BOOL isVisible;
@property (nonatomic, readonly) BOOL isTopViewController;
@property (nonatomic, readonly) BOOL isOnScreen;
- (void)createAlert:(NSString * _Nonnull)error;
- (void)createWebAlertWithTryAgain:(NSString * _Nonnull)error selector:(SEL _Nonnull)selector;
@end


@interface UIWindow (SWIFT_EXTENSION(HafsaInspectorApp))
/**
  Captures a screenshot of the contents in the apps keyWindow.

  returns:
  An optional UIImage.
*/
- (UIImage * _Nullable)capture;
@end


@interface UIWindow (SWIFT_EXTENSION(HafsaInspectorApp))
@property (nonatomic, readonly, strong) UIViewController * _Nullable topMostViewController;
@end


@interface UIWindow (SWIFT_EXTENSION(HafsaInspectorApp))
@property (nonatomic, readonly, strong) UIViewController * _Nullable visibleViewController;
+ (UIViewController * _Nullable)getVisibleViewControllerFrom:(UIViewController * _Nullable)vc;
@end



SWIFT_CLASS("_TtC17HafsaInspectorApp10WebService")
@interface WebService : NSObject
- (NSDictionary<NSString *, id> * _Nullable)parseJSON:(NSData * _Nonnull)data;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIWebView;

SWIFT_CLASS("_TtC17HafsaInspectorApp21WebViewViewController")
@interface WebViewViewController : UIViewController <UIWebViewDelegate>
@property (nonatomic, weak) IBOutlet UIWebView * _Null_unspecified webView;
@property (nonatomic, copy) NSString * _Nonnull url;
@property (nonatomic, strong) MBProgressHUD * _Nonnull progess;
+ (WebViewViewController * _Nonnull)create:(NSString * _Nonnull)url;
- (void)viewDidLoad;
- (void)webViewDidStartLoad:(UIWebView * _Nonnull)webView;
- (void)webViewDidFinishLoad:(UIWebView * _Nonnull)webView;
- (void)webView:(UIWebView * _Nonnull)webView didFailLoadWithError:(NSError * _Nonnull)error;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

#pragma clang diagnostic pop
